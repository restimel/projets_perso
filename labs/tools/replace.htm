<!DOCTYPE html>
<html>
<head>
	<meta charset="utf8">
	<meta author="Benoit Mariat">
	<meta date="12/12/12">
	<title>Tools: Text switching</title>
	<style type="text/css">
.info{
	color:#0000CC;
}
.warning{
	color:#CC9900;
}
.error{
	color:#CC0000;
}
.information{
	float:right;
	font-size:0.5em;
/*	cursor:pointer;*/
}
.nonStandard{
	font-size:0.5em;
}
.shortCut{
	font-size:1.2em;
	font-weight:bold;
}

*[draggable=true] hr{
	cursor:move;
}

.rgxover{
	color: #666666;
	/*background-color:rgba(250,200,0,0.5);*/
}
.rgxover>hr:first-child{
	visibility:visible !important;
	width:90%;
	height: 0px;
	border: 1px dashed #CCCC00;
}
#zoneRegexp>div>hr:first-child, #endZoneRgx>hr:first-child{
	visibility:hidden;
}
.moveIt{
	/*color: #FF9900;*/
	background-color:rgba(250,200,0,0.2);
}

#zoomEditor{
	display:none;
	text-align:center;
	position:fixed;
	top:10%;
	left:10%;
	width:80%;
	height:85%;
	background-color:#EEEEFF;
	border:1px solid black;
	box-shadow: 5px 5px 21px 0 #000;
	overflow:auto;
	z-index:1001;
}
#zoomEditor fieldset{
	height: 44%;
	float: left;
	text-align:left;
}
fieldset.srch{
	width:70%;
}
fieldset.option{
	width:20%;
}
#zoomEditor textarea{
	width: 99%;
	height: 91%;
	box-shadow: inset 0 0 0.8em 0 #000;
}

menu{
	position:fixed;
	top:0px;
	right:0px;
	z-index:1000;
}

menu>aside{
	visibility:hidden;
	font-style:italic;
	font-size:0.8em;
}
	</style>
</head>
<body>
<!--TODO
	améliorer design: mettre des couleurs
	ajouter sauvegarde localstore
	Ajout de règles avec pattern prédéfini
	Faire Analyseur syntaxique de regexp + test
	Ajout manuel d'aide
-->

<menu title="Rules manager">
	<button id="saveReg">Save Rules</button> <button id="loadReg">Load Rules</button><br>
	<textarea id="manageCode" placeholder="Rules to load"></textarea>
	<aside id="infoSave">You should copy this line to reuse it later</aside>
</menu>

<label>source:<textarea id="source" rows="20" cols="50" placeholder="text to change"></textarea></label>
<button onclick="document.getElementById('source').value='';">empty</button>
<label id="sourceFile">Load source from File<input type="file"></label><br>

<header>Change rules to apply:</header>
<section id="zoneRegexp"></section>
<div id="endZoneRgx"><hr><hr></div>
<button id="addReg" title="Add a new rule">+</button>
<hr>

<button id="doIt">Execute Replacement</button><br>
<label>result:<textarea id="resultat" rows="20" cols="40" placeholder="text changed will be displayed here"></textarea></label>
<button onclick="document.getElementById('resultat').value='';">empty</button><br>

<div id="loading" style="display:none;text-align:center;position:fixed;top:50%;left:40%;width:300px;height:100px;background-color:#EEEEFF;border:1px solid black;">
	<progress>Wait...</progress><br>
	Script is running
</div>


<div id="zoomEditor">
	<header id="zoomEditorHeader"></header>
	<fieldset class="srch">
		<legend>Pattern to find</legend>
		<textarea id="zoomEditorRegxp"></textarea>
	</fieldset>
	<fieldset class="option">
		<legend>Flag</legend>
		<label title="Pattern is searched many times"><input type="checkbox"> <span class="shortCut">g</span>lobal search</label><br>
		<label title="uppercase and lowercase in the pattern match the same pattern"><input type="checkbox"> case <span class="shortCut">i</span>nsensitive</label><br>
		<label title="^ and $ match the begining and the end of lines"><input type="checkbox"> <span class="shortCut">m</span>ultiple line</label><br>
		<label title="When the pattern is searched again it starts from previous pattern found"><input type="checkbox"> stick<span class="shortCut">y</span> <span class="nonStandard">(non-standard)</span></label><br>
		<label>other: <input type="text" style="width:5ex;"></label><br>
	</fieldset>
	<fieldset class="srch">
		<legend>Replace</legend>
		<textarea id="zoomEditorReplace"></textarea>
		<textarea id="zoomEditoriReplace" placeholder="each line represents an occurence. Pattern should be separated by ~~. When all occurence are used, it comes back to the first. Exemple:occurence1_pattern1~~pattern2~~pattern3 of the first occurence"></textarea>
	</fieldset>
	<fieldset class="option">
		<legend>Option</legend>
		<label><input type="checkbox">use incremental string&nbsp;replace</label><br>
		<label><input type="checkbox">use incremental value</label><br>
	</fieldset>
</div>

<script type="text/javascript">
var rulesOrder=[]; //donne l'ordre des règles à effectuer

var addReg=(function(){
//ajout d'un bloc de Regex
	var nbElement=0;
	return function(){
		var text='<hr><hr>';
		text+='<form id="regexpForm'+nbElement+'">';
		text+='<label>regexp:<input id="regexp'+nbElement+'"></label>';
		text+='<label>flag:<input id="flag'+nbElement+'" value="gi" placeholder="gimy"></label>';
		text+='<aside style="float:right">';
		text+='<input type="text" id="name'+nbElement+'" title="name to explain this regexp, this has no impact on RegExp" placeholder="name to explain this regexp" style="width:20em;"><br>';
		text+='<label><input type="checkbox" id="active'+nbElement+'" title="Activate this RegExp" checked>Activate</label><br>';
		text+='<div class="information" id="information'+nbElement+'">id:'+nbElement+'</div>';
		text+='<output id="message'+nbElement+'"></output>';
		text+='</aside>';
		text+='<br>';
		text+='<label title="\\n, \\r and \\t should be writen §n, §r and §t">replace:<input id="replace'+nbElement+'"></label>';
		text+='<label style="display:none;" title="each line represents an occurence. Pattern should be separated by ~~">Incremental&nbsp;Replace:<textarea id="iReplace'+nbElement+'" placeholder="each line represents an occurence. Pattern should be separated by ~~. When all occurence are used, it comes back to the first. Exemple:occurence1_pattern1~~pattern2~~pattern3 of the first occurence"></textarea></label> ';
		text+='<label>use&nbsp;incremental&nbsp;string&nbsp;replace:<input id="modeReplace'+nbElement+'" type="checkbox"></label> ';
		text+='<label>use&nbsp;incremental&nbsp;value:<input id="modeIncReplace'+nbElement+'" type="checkbox"></label>';
		text+='<aside style="display:none;font-style:italic;font-size:0.8em;">The incremental value should be encapsuled by §! and !§. Example: to start from 0, you should write §!0!§</aside>';//doit être placé juste derrière le label de modeIncReplace
		text+='<br>';
		text+='</form>';
		
		//ajout de l'élément principal de la règle
		var element=document.createElement("div");
		element.id="rgxDiv"+nbElement;
		element.draggable=true;
		element.ondragover=rgxDragOver;
		element.ondragleave=rgxDragLeave;
		element.ondrop=rgxDrop;
		element.innerHTML=text;
		document.getElementById("zoneRegexp").appendChild(element);
		
		//ajout des fonctions
		document.getElementById("regexpForm"+nbElement).addEventListener("change",verifForm,false); //ajoute la vérification du formulaire
		//document.getElementById("regexpForm"+nbElement).addEventListener("changeinput",verifForm,false);
		document.getElementById("regexpForm"+nbElement).addEventListener("dblclick",zoomEditor,false); //ajoute l'action de zoom sur la règle
		document.getElementById("modeReplace"+nbElement).addEventListener("change",changeModeReplace,false); //ajoute l'action de changement de zone de remplacement
		document.getElementById("modeIncReplace"+nbElement).addEventListener("change",changeModeInc,false); //ajoute l'action d'affichage de commentaire lorsqu'on active l'incremental value
		
		//ajoute la règle à la fin de la liste
		rulesOrder.push(nbElement++);
	};
})();

function changeModeReplace(elRef){
//permet d'afficher/cacher les textarea replace/ireplace en fonction de l'élément replace (elref)
	if(!elRef || !elRef.id){
		elRef=this;
	}
	var e1=elRef.parentNode.previousElementSibling;
	if(elRef.checked){
		e1.style.display='inline';
		e1.previousElementSibling.style.display='none';
		e1.lastChild.focus();
	}else{
		e1.style.display='none';
		e1.previousElementSibling.style.display='inline';
	}
}

function changeModeInc(elRef){
//permet d'afficher/cacher les commentaires de l'incremental value
	if(!elRef || !elRef.id){
		elRef=this;
	}
	elRef.parentNode.nextElementSibling.style.display=elRef.checked?'inline':'none';
}

var zoomEditor=(function(){
//permet d'avoir une fenêtre d'édition un peu plus grande
	var ref=null, //référence à la règle actuellement affiché
		elemBloc = document.getElementById("zoomEditor"), //référence à la fenêtre d'affichage
		elemHeader = document.getElementById("zoomEditorHeader"), //référence à l'entête
		elemEditor = document.getElementById("zoomEditorRegxp"), //référence au bloc d'écriture
		elemReplace = document.getElementById("zoomEditorReplace"), //référence au bloc de remplacement
		elemiReplace = document.getElementById("zoomEditoriReplace"), //référence au bloc de remplacement incrémental
		inputs=document.querySelectorAll("#zoomEditor>fieldset input"),
		elemFlagg = inputs[0], //flag g
		elemFlagi = inputs[1], //flag g
		elemFlagm = inputs[2], //flag g
		elemFlagy = inputs[3], //flag g
		elemFlagother = inputs[4], //flag g
		elemOptionMdIncrementalReplace = inputs[5], //mode incremental replace
		elemOptionMdIncrementalValue = inputs[6]; //mode incremental value
	
	elemOptionMdIncrementalReplace.onchange = displayMode;
	
	elemEditor.onblur=verifyFocus;
	
	function verifyFocus(event){
	//permet de vérifier si le focus (le click) est toujours sur la fenêtre de zoom ou non
		var elem=event.target;
		while(elem !== document){
			if(elem === elemBloc){
				return;
			}
			elem = elem.parentNode;
		}
		document.removeEventListener("click",verifyFocus,false);
		maj();
	}
	
	function maj(){
	//mise à jour de l'élément d'origine
		document.getElementById("regexp"+ref).value = elemEditor.value;
		//document.getElementById("name"+ref).value = elemHeader.textContent;
		document.getElementById("flag"+ref).value = (elemFlagg.checked?"g":"")+(elemFlagi.checked?"i":"")+(elemFlagm.checked?"m":"")+(elemFlagy.checked?"y":"")+elemFlagother.value;
		document.getElementById("replace"+ref).value = elemReplace.value;
		document.getElementById("iReplace"+ref).value = elemiReplace.value;
		
		document.getElementById("modeReplace"+ref).checked = elemOptionMdIncrementalReplace.checked;
		document.getElementById("modeIncReplace"+ref).checked = elemOptionMdIncrementalValue.checked;
		//mise à jour de l'affichage de la règle
		changeModeReplace(document.getElementById("modeReplace"+ref));
		changeModeInc(document.getElementById("modeIncReplace"+ref));
		
		elemBloc.style.display="none";
	}
	
	function displayMode(){
	//permet d'afficher/cacher le textarea de replace/ireplace
		if(elemOptionMdIncrementalReplace.checked){
			elemReplace.style.display="None";
			elemiReplace.style.display="Block";
		}else{
			elemReplace.style.display="Block";
			elemiReplace.style.display="None";
		}
	}
	
	return function (event){
	//affiche la fenêtre d'édition de zoom et la met à jour
		ref = this.id.substr(10);
		elemEditor.value = document.getElementById("regexp"+ref).value;
		elemHeader.textContent = document.getElementById("name"+ref).value||"Rules #"+ref;
		var flag = document.getElementById("flag"+ref).value;
		elemFlagg.checked = (flag.indexOf("g")!==-1);
		elemFlagi.checked = (flag.indexOf("i")!==-1);
		elemFlagm.checked = (flag.indexOf("m")!==-1);
		elemFlagy.checked = (flag.indexOf("y")!==-1);
		elemFlagother.value = flag.replace(/[gimy]/g,"");
		
		elemReplace.value = document.getElementById("replace"+ref).value;
		elemiReplace.value = document.getElementById("iReplace"+ref).value;
		
		elemOptionMdIncrementalReplace.checked = document.getElementById("modeReplace"+ref).checked;
		elemOptionMdIncrementalValue.checked = document.getElementById("modeIncReplace"+ref).checked;
		
		displayMode();
		
		elemBloc.style.display="block";
		elemEditor.focus();
		document.addEventListener("click",verifyFocus,false);
	};
})();

function verifForm(event){
	//permet de vérifier différents paramètres d'un bloc regexp
	var form=this,
		nbElement = form.id.substr(10),
		message = document.getElementById("message"+nbElement),
		msg = "",
		status = "info",
		tmp;
	//warning
	if(form["modeReplace"+nbElement].checked && form["modeIncReplace"+nbElement].checked){
		msg = "incremental value is not available in incremental string replacement";
		status = "warning";
	}
	//error
	if((tmp = isValidRegExp(form["regexp"+nbElement].value))!=="OK"){
		msg = "RegExp is not valid: "+tmp;
		status = "error";
	}
	message.value = msg;
	message.className = status;
}

function isValidRegExp(str){
	//permet de vérifier que la chaine est une regexp valide
	//retourne "OK" si c'est valide sinon retourne le message d'erreur
	var i=0,
		li=str.length,
		open = [],
		lastOpen = "",
		char = "",
		lastChar,
		nxtChar = str.charAt(0);
		msg = "";
	for(i=0;i<li;i++){
		lastChar = char;
		char = nxtChar;
		nxtChar=str.charAt(i+1);
		if(char==="\\"){ //caractère d'échappement
			if(i===li-1){
				return "(c"+i+") escaped character at the end";
			}
			char+=nxtChar;
			nxtChar = str.charAt(++i+1);
			continue;
		}
		switch(lastOpen){
			case "[": //mode class
				switch(char){
					case "]":
						open.pop();
						lastOpen=open[open.length-1];
					break;
					case "-":
						if(lastChar!=="[" && nxtChar!=="]" && lastChar>nxtChar){
							return "(c"+i+") Range out of order in character class";
						}
					break;
				}
			break;
			case "(": //mode parenthèse
				switch(char){
					case ")":
						open.pop();
						lastOpen=open[open.length-1];
					break;
					case "?":
						if(lastChar==="(" && nxtChar!==":" && nxtChar!=="!" && nxtChar!=="="){
							return "(c"+i+") Invalid group";
						}else if(lastChar==="^" || lastChar==="$" || (lastChar===":" || lastChar==="!") && str.charAt(i-2)==="?" && str.charAt(i-3)==="("){
							return "(c"+i+") Nothing to repeat";
						}else if((lastChar==="?" || lastChar==="*" || lastChar==="+" || lastChar==="¤}" || lastChar==="|") && (str.charAt(i-2)==="?" || str.charAt(i-2)==="*" || str.charAt(i-2)==="+" || str.charAt(i-2)==="¤}")){
							return "(c"+i+") Nothing to repeat";
						}
					break;
					case "*":
						if(lastChar==="(" || lastChar==="?" || lastChar==="*" || lastChar==="+" || lastChar==="¤}" || lastChar==="^" || lastChar==="$" || lastChar==="|" || (lastChar===":" || lastChar==="!" || lastChar==="=") && str.charAt(i-2)==="?" && str.charAt(i-3)==="("){
							return "(c"+i+") Nothing to repeat";
						}
					break;
					case "+":
						if(lastChar==="(" || lastChar==="?" || lastChar==="*" || lastChar==="+" || lastChar==="¤}" || lastChar==="^" || lastChar==="$" || lastChar==="|" || (lastChar===":" || lastChar==="!" || lastChar==="=") && str.charAt(i-2)==="?" && str.charAt(i-3)==="("){
							return "(c"+i+") Nothing to repeat";
						}
					break;
					case "{":
						if(char = str.substr(i).match(/{[0-9]+,[0-9]*}/)){
							char=char[0];
							if(lastChar==="(" || lastChar==="?" || lastChar==="*" || lastChar==="+" || lastChar==="¤}" || lastChar==="^" || lastChar==="$" || lastChar==="|" || (lastChar===":" || lastChar==="!" || lastChar==="=") && str.charAt(i-2)==="?" && str.charAt(i-3)==="("){
								return "(c"+i+") Nothing to repeat";
							}
							i+=char.length-1;
							nxtChar=str.charAt(i+1);
							char="¤}";
						}
					break;
					case "[":
						lastOpen="[";
						open.push(lastOpen);
						if(nxtChar==="]"){
							msg+="Empty class [] could not match any string.";
						}
					break;
				}
			break;
			default: //mode normal
				switch(char){
					case "[":
						lastOpen="[";
						open.push(lastOpen);
						if(nxtChar==="]"){
							msg+="Empty class [] could not match any string.";
						}
					break;
					case "(":
						lastOpen="(";
						open.push(lastOpen);
					break;
					case "?":
						if(lastChar==="" || lastChar==="^" || lastChar==="$" || lastChar==="|"){
							return "(c"+i+") Nothing to repeat";
						}else if((lastChar==="?" || lastChar==="*" || lastChar==="+" || lastChar==="¤}") && (str.charAt(i-2)==="?" || str.charAt(i-2)==="*" || str.charAt(i-2)==="+" || str.charAt(i-2)==="¤}")){
							return "(c"+i+") Nothing to repeat";
						}
					break;
					case "*":
						if(lastChar==="?" || lastChar==="*" || lastChar==="+" || lastChar==="¤}" || lastChar==="" || lastChar==="^" || lastChar==="$" || lastChar==="|"){
							return "(c"+i+") Nothing to repeat";
						}
					break;
					case "+":
						if(lastChar==="?" || lastChar==="*" || lastChar==="+" || lastChar==="¤}" || lastChar==="" || lastChar==="^" || lastChar==="$" || lastChar==="|"){
							return "(c"+i+") Nothing to repeat";
						}
					break;
					case "{":
						if(char = str.substr(i).match(/{([0-9]+),([0-9]*)}/)){
							if(typeof char[2] !== "undefined" && parseInt(char[1],10)>parseInt(char[2],10)){
								return "(c"+i+") numbers out of order in {} quantifier";
							}
							char=char[0];
							if(lastChar==="?" || lastChar==="*" || lastChar==="+" || lastChar==="¤}" || lastChar==="^" || lastChar==="$" || lastChar==="" || lastChar==="|"){
								return "(c"+i+") Nothing to repeat";
							}
							i+=char.length-1;
							nxtChar=str.charAt(i+1);
							char="¤}";
						}
					break;
				}
		}
	}
	if(open.length){
		return "Unterminated group "+open.join(",")+(open.length===1?" is":" are")+" not closed";
	}
	return "OK"; //TODO warning message
}

function prepareReplace(){
	//permet d'afficher que c'est en cours de traitement
	document.getElementById("loading").style.display="block";
	//window.setTimeout(doReplace,10);
	doReplace();
}

function doReplace(){
//effectue le remplacement à partir des règles regxp
	var rslt = document.getElementById("source").value,
		c=0,
		i=rulesOrder[0],
		rgx=document.getElementById("regexp"+i),
		flg,rplc,Regex,
		modeValueInc;
	
	do{
		i=rulesOrder[c];
		modeValueInc = document.getElementById("modeIncReplace"+i).checked;
		rgx = rgx.value;
		if(!rgx) continue; // il n'y a pas de valeur donnée à cette regexp
		if(!document.getElementById("active"+i).checked) continue; // la RegExp a été désactivée
		flg = document.getElementById("flag"+i).value;
		if(document.getElementById("modeReplace"+i).checked){
			//mode remplacement incrémental
			if(modeValueInc) console.warn("Value incremental is not yet implemented with this option");
			rplc=function(){
				var liste=document.getElementById("iReplace"+i).value.split(/\r\n|\n|\r/),
					index=0;
				return function(motif){
					if(arguments.length>3){
						var i=1,
							li=arguments.length-2,
							motifs=liste[index++%liste.length].split("~~");
						do{
							if(arguments[i]) motif=motif.replace(arguments[i],motifs[i-1]||"");
						}while(++i<li);
						return motif;
					}else{
						return liste[index++%liste.length];
					}
				}
			}();
		}else{
			//mode remplacement normal
			rplc = document.getElementById("replace"+i).value.replace(/§n/g,"\n").replace(/§r/g,"\r").replace(/§t/g,"\t");
			if(modeValueInc){
				//mode valeur incrémentale
				rplc = function(r){
					var values = r.match(/§!([\s\S]+?)!§/g) || [];
					values.forEach(function(v,i){
						values[i]=v.replace(/^§!|!§$/g,"");
						if(!isNaN(values[i])){
							values[i] = parseFloat(values[i]);
						}
					});
					var nb=0;
					var mtf = r.replace(/§!([\s\S]+?)!§/g,function(){return "§!"+(nb++);});
					//console.debug(values);
					return function(motif){
						var rslt = mtf;
						if(arguments.length>3){
							var arg = arguments;
							rslt = rslt.replace(/\$([1-9])/g,function(m,nb){return arg[nb*1];});
						}
						//effectue les remplacements incrémentaux
						rslt = rslt.replace(/§!(\d+)/g,function(m,nb){return values[nb*1]++;});
						return rslt;
					};
				}(rplc);
			}
		}
		try{
			Regex = new RegExp(rgx,flg);
		}catch(e){
			alert("There is an error to build the regexp #"+(i+1)+". Reason is:\n"+e);
		}
		rslt = rslt.replace(Regex,rplc);
	}while(rgx=document.getElementById("regexp"+rulesOrder[++c]));
	document.getElementById("resultat").value=rslt;

	document.getElementById("loading").style.display="none";
}

function saveReg(){
//permet de sauvegarder des Regexp dans un JSON
	var rslt=[],
		c=0,i=rulesOrder[0],
		rgx=document.getElementById("regexp"+i),
		flg,mode,rplc,inc,name,deactivated;
	
	do{
		//i=rulesOrder[c];
		rgx = rgx.value;
		if(!rgx) continue; // il n'y a pas de valeur donnée à cet regexp
		flg = document.getElementById("flag"+i).value;
		name = document.getElementById("name"+i).value;
		if(mode=document.getElementById("modeReplace"+i).checked){
			rplc = document.getElementById("iReplace"+i).value;
		}else{
			rplc = document.getElementById("replace"+i).value;
		}
		inc=document.getElementById("modeIncReplace"+i).checked;
		deactivated=!document.getElementById("active"+i).checked;
		rslt.push({name:name,rgx:rgx,flg:flg,mode:mode,inc:inc,replace:rplc,deactivated:deactivated});
	}while(rgx=document.getElementById("regexp"+(i=rulesOrder[++c])));
	document.getElementById("manageCode").value=JSON.stringify(rslt);
	document.getElementById("infoSave").style.visibility="visible";
}

function loadReg(data){
//permet de charger des Regexp à partir d'un JSON
	document.getElementById("infoSave").style.visibility="hidden";
	data=data||document.getElementById("manageCode").value;
	var obj={},
		elTmp; //sert de tampon pour des éléments réutilisés plusieurs fois
	
	//transformation en objet
	if(typeof data === "object"){
		if(data instanceof Event){
			data=document.getElementById("manageCode").value;
		}else{
			obj=data;
		}
	}
	
	if(typeof data === "string"){
		try{
			obj=JSON.parse(data);
		}catch(e){
			alert("Load has failed.\n"+e);
			return false;
		}
	}else{
		alert("Load has failed.\nData type is not supported");
		return false;
	}
	
	//application des données
	if(obj instanceof Array){
		var i=0,li=obj.length,elem;
		while(i<li){
			if(!(elem=document.getElementById("regexp"+i))){
				addReg();
				elem=document.getElementById("regexp"+i);
			}else{
				//remise en ordre
				elTmp=document.getElementById("rgxDiv"+i);
				elTmp.parentNode.insertBefore(elTmp,elTmp.parentNode.children[i]);
			}
			elem.value=obj[i].rgx;
			document.getElementById("name"+i).value = obj[i].name || "";
			document.getElementById("active"+i).checked = (obj[i].deactivated!=true);
			(elTmp=document.getElementById("modeIncReplace"+i)).checked=obj[i].inc;
			changeModeInc(elTmp);
			if(obj[i].mode){
				(elTmp=document.getElementById("modeReplace"+i)).checked=true;
				document.getElementById("iReplace"+i).value=obj[i].replace;
				document.getElementById("replace"+i).value="";
			}else{
				(elTmp=document.getElementById("modeReplace"+i)).checked=false;
				document.getElementById("iReplace"+i).value="";
				document.getElementById("replace"+i).value=obj[i].replace;
			}
			changeModeReplace(elTmp);

			document.getElementById("flag"+i).value=obj[i++].flg;
		}
		generateOrder(); //maj de l'ordre
		while(elem=document.getElementById("regexp"+i)){
			elem.value="";
			document.getElementById("iReplace"+i).value="";
			document.getElementById("replace"+i).value="";
			document.getElementById("flag"+i).value="gi";
			document.getElementById("name"+i).value = "";
			document.getElementById("active"+i).checked = true;
			document.getElementById("modeReplace"+i).checked=false;
			document.getElementById("modeIncReplace"+(i++)).checked = false;
		}
	}else{
		alert("Load has failed.\nData format is not supported");
		return false;
	}
}

function loadSourceFile(event,cible){
//chargement d'un fichier dans la zone source
	var file=cible.files[0],
		reader = new FileReader();
	
	if(!file.type.match(/text.*/) &&
		!confirm("This file Format seems not to be text ("+(file.type||"unknown format")+").\nIn this case it could not be read.\n\n Are you sure to load this file ?")
	){
		return false;
    }
	
	reader.onload = function(e) {
		document.getElementById("source").value=e.target.result;
	};
	
	if(file.size>10000000){
		alert(["fichier trop gros: ",file.size/100000,"Mo"].join(''));
		//http://www.html5rocks.com/en/tutorials/file/dndfiles/
		//https://developer.mozilla.org/en/DOM/FileReader#readAsText%28%29
	}else{
		reader.readAsText(file);
	}
}

function generateOrder(){
//permet de redéfinir l'ordre des règles
	rulesOrder=[];
	var liste=document.getElementById("zoneRegexp").children,li=liste.length,i=0;
	while(i<li){
		rulesOrder.push(liste[i].id.substr(6));
		i++;
	}
}

function rgxDragStart(event){
//démarrage d'un drag sur une zone regexp
	event.dataTransfer.effectAllowed = "move";
	event.target.className="moveIt";
	event.dataTransfer.setData("Text", event.target.getAttribute('id'));
}

function rgxDrop(event){
//l'élément regexp est laché
	event.preventDefault();
	event.stopPropagation();
	this.parentNode.insertBefore(document.getElementById(event.dataTransfer.getData("Text")),this);
	rgxDragLeave(event,this); // pour restaurer l'état par défaut
	generateOrder();
	return false;
}

function ergxDrop(event){
//l'élément regexp est laché après le dernier bloc (hors de la zone)
	event.preventDefault();
	event.stopPropagation();
	document.getElementById("zoneRegexp").appendChild(document.getElementById(event.dataTransfer.getData("Text")));
	rgxDragLeave(event,this); // pour restaurer l'état par défaut
	generateOrder();
	return false;
}

function rgxDragOver(event){
//on passe au dessus d'un élément droppable
	var elem=this;
	elem.className="rgxover";
	return false;
}

function rgxDragLeave(event,elem){
//on quitte un élément droppable
	elem=elem||this;
	elem.className="none";
}


window.onload=function(){
	var zRgx = document.getElementById("zoneRegexp");
	zRgx.ondragstart=rgxDragStart;
	
	//zone après les regexp (permet de mettre un bloc à la fin)
	var zERgx = document.getElementById("endZoneRgx");
	zERgx.ondragover=rgxDragOver;
	zERgx.ondragleave=rgxDragLeave;
	zERgx.ondrop=ergxDrop;
	
	addReg();
	if(!window.File || !window.FileReader){
		//le javascript ne supporte pas les API File ou FileReader
		document.getElementById("sourceFile").display="none";
	}
}


//ajout des événements sur les éléments
document.getElementById("saveReg").onclick = saveReg;
document.getElementById("loadReg").onclick = loadReg;
document.getElementById("sourceFile").lastChild.onchange = function(event){loadSourceFile(event,this);};
document.getElementById("addReg").onclick = addReg;
document.getElementById("doIt").onclick = prepareReplace;
</script>
</body>
</html>

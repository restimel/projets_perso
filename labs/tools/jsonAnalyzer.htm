<!DOCTYPE html>
<html>
<head>
	<meta charset="utf8">
	<title>JSON Analyzer</title>
<!--
	This web file is a tool which helps to manipulate JSON object
	Original File : http://b.mariat.free.fr/tools/jsonReader.htm
	Author : Benoit Mariat
	Date : Dec 2011
		update :	June 2012 (search from joker token and found an object from its value)
					June 2013 (improve search by adding functions (typeof and length), and refactoring display)
					August 2013 (add edition)
-->

<!--
{"a":{"l0":{"l10":1,"l20":true,"l30":null},"l1":{"l11":1,"l21":true,"l31":null},"l2":{"l12":1,"l22":true,"l32":null},"l3":{"l13":1,"l23":false,"l33":null}},"b":{"l0":{"l10":1,"l20":true,"l30":null},"l1":{"l11":1,"l21":true,"l31":null},"l2":{"l12":1,"l22":true,"l32":null},"l3":{"l13":1,"l23":false,"l33":null}}}
-->
	<style>
		#corps header{
			font-weight : bold;
			font-size : 1.5em;
			cursor : pointer;
		}
		.openObject{
			display: block;
			border: 1px solid black;
			padding-left: 1.5em;
			margin-left:10px;
			box-shadow: 5px 5px 5px 0px #CCCCCC,inset 0px -1px 1px 0px #000000;
		}
		.closeObject{
			display:inline;
		}
		.objectContainer header{
			color: #0000FF;
			display: inline;
			padding: 5px;
			cursor: pointer;
			font-size : 1em;
		}
		.objectPresentation{
			margin-bottom : 2em;
		}
		
		.objectPresentation input{
			width : 100%;
			margin-top: 1em;
		}
		header.object:before{
			content: "⋆\a0\a0";
			font-size: xx-small;
			vertical-align: 30%;
			margin-left: -1.5em;
		}
		#corps #javascript{
			position: fixed;
			top: 10px;
			right: 10px;
			padding: 5px;
			box-shadow: 7px 7px 10px 5px #DDDDDD;
			background-color: rgba(250,250,255,0.95);
		}
		#corps #javascript input{
			height: 20px;
			font-style: italic;
			width: 95%;
		}
		#corps table{
			border : 4px solid black;
			border-collapse:collapse;
		}
		#corps th{
			border : 1px solid black;
			background-color : #AA33CC;
			padding : 0.3em;
		}
		#corps td{
			border : 1px solid black;
			padding : 0.25em;
		}
		
		.highlight{
			background-color : rgba(250,250,50,0.6);
		}
		
		.JSONLink{
			cursor : pointer;
			font-size : 0.95em;
			font-style : italic;
		}
		
		nav{
			position: fixed;
			bottom: 10px;
			right: 10px;
			padding: 1em;
			box-shadow: 7px 7px 10px 5px #DDDDDD;
			border : 1px dotted black;
			background-color: rgba(250,250,255,0.95);
		}
		nav header{
			cursor : pointer;
		}
		
		.hide~*{
			display:none;
		}
		
		.small{
			font-size : x-small;
		}
	</style>
</head>
<body>

<div id="corps">

	<section id="JSON1">
		<header>Code JSON</header>
		<label>JSON:<textarea id="source" placeholder="Code JSON to analyze"></textarea></label>
		<label>Human readable:<textarea id="source2" placeholder="output JSON with indentation"></textarea></label>
	</section>
	<hr style="width:50%">
	<section class="objectPresentation">
		<header>Object hierarchy</header>
		<div id="OBJ1" class="objectContainer"></div>
	</section>
	<hr>
	<section>
		<header>2nd Code JSON</header>
		<label>JSON:<textarea id="sourceBis" placeholder="Code JSON to analyze"></textarea></label>
		<label>Human readable:<textarea id="sourceBis2" placeholder="output JSON with indentation"></textarea></label>
	</section>
	<hr style="width:50%">
	<section class="objectPresentation">
		<header>Object hierarchy</header>
		<div id="OBJ2" class="objectContainer"></div>
	</section>
	<hr>
	<section>
		<header><label><input type="checkbox" id="comparaisonResultDoIt" checked="">Difference between JSON</label></header>
		<div id="comparaisonResult" class="comparaisonResult"></div>
	</section>

	<section id="javascript">
		<header>JavaScript code to access an element</header>
		<input id="codeJS" title="OBJ. désigne l&#39;objet créé par JSON"><br>
		<details><summary>Edit ✍</summary>
			<section>
				<label>Property:<input type="text" placeholder="Property's name" id="pName"></label><br>
				<label>Value:<input type="text" placeholder="Property's value" id="pValue"></label> <output id="pValueStatus"></output><br>
				<select id="pNNodeType">
					<option value="nChild">New child</option>
					<option value="nClChild">Clone last child as a new child</option>
					<option value="nClSibling">Clone this as a new sibling</option>
				</select>
				<button title="Create New Value" id="pAdd">Add</button> <button title="Remove this property" id="pDelete">Delete</button>
			</section>
		</details>
	</section>

	
	<nav>
		<header>Navigation</header>
		<a href="#JSON1">First JSON</a><br>
		<a href="#OBJ1_search" class="small">Search for 1st JSON</a><br>
		<a href="#JSON2">Second JSON</a><br>
		<a href="#OBJ2_search" class="small">Search for 2nd JSON</a><br>
		<a href="#comparaisonResultDoIt">Comparison</a><br>
	</nav>
</div>


<!-- liste de recherche fréquente -->
<datalist id="commonSearch">
	<option value="*.(typeof Array)">Search for Array</option>
	<option value="*.(length 0)|*=null">Search for empty element</option>
</datalist>



<script>


//Sauvegarde Globale des objets:
var OBJ = {
	OBJ1:null,
	OBJ2:null
};
	
	
function countObj(myobj){
//permet de compter le nombre de propriétés de l'objet
	var count = 0,x;
	for (x in myobj) if (myobj.hasOwnProperty(x)) count++;
	return count;
}

function splitCode(code){
//retourne la liste de toutes les propriétées utilisé par le code
	if(code instanceof Array) return code;
	
	var properties = code.split(/"?\]\.|"?\]$|"?\]\["?|\["?|\./g);
	if(!properties[properties.length-1]) properties.pop(); //enlève le dernier champ ("")
	
	return properties;
}

function getObjectFromCode(code,offset){
//permet de récupérer un objet à partir du code (en chaine de caractère ou en liste de propriétés)
//offset is to select parent, it should be a negative number. default is 0 (select object describe in code)
	var lst = splitCode(code), //liste des propriétés
		obj = OBJ, //objet recherché (en partant de l'objet global)
		i, li;

	if(typeof offset !== "number" || offset>0) offset = 0;
	
	li = lst.length + offset;
	for(i=0; i<li; i++){
		obj = obj[lst[i]];
		if(typeof obj === "undefined") return null;
	}
	
	return obj;
}

function createLink(obj,elem,str){
//permet de créer les blocs d'ouverture
	return function(e){
		if(e !== true && elem.style.display=="block"){
			elem.style.display="none";
		}else{
			if(!elem.innerHTML){
				writeObj(obj,elem,str);
			}
			elem.style.display="block";
		}
	};
}

function writeObj(objet,element,str){
//permet d'afficher les propriétés sous formes d'éléments
	var sct,elem,body,titre,x,code,txt;
	element.innerHTML = "";
	for(x in objet){
		code = str+attributeToString(x); //pour le chemin JS

		//création de la zone de la propriétée
		sct=document.createDocumentFragment();
	
		//nom de la propriété
		titre=document.createElement("header");
		titre.textContent = x;
		titre.id=code;
		
		//information sur la propriété
		elem=document.createElement("section");
		elem.className = "closeObject";
		
		//propriétés de la propriété
		body=document.createElement("section");
		body.className = "openObject";
		body.style.display = "none";
		
		//remplissage des sections
		txt = displayObjInformation(objet[x]);
		elem.textContent = txt[0];
		if(txt[1]) titre.addEventListener("click",createLink(objet[x],body,code),false);
		if(typeof objet[x] === "object"){
			titre.className = "object";
		}
		//ajout des événements
		titre.addEventListener("mouseover",updateCodeJS,false);
		elem.addEventListener("mouseover",updateCodeJS,false);
		titre.addEventListener("click",updateCodeJS,false);
		elem.addEventListener("click",updateCodeJS,false);
		
		//ajout au DOM
		sct.appendChild(titre);
		sct.appendChild(elem);
		sct.appendChild(body);
		sct.appendChild(document.createElement("br"));
		element.appendChild(sct);
	}
	element.className="openObject";
}

//met à jour le code de la propriété et ses info (le contexte doit être l'element HTML d'affichage de la propriété)
var updateCodeJS = (function(){
	var frozenTime=0; //timestamp jusqu'auquel le mouseover ne fonctionnera plus (car priorité click)
	
	return function (e){
	//met à jour le code de la propriété et ses info (le contexte doit être l'element HTML d'affichage de la propriété)
		if(e && e.type === "mouseover" && Date.now()<frozenTime){
			//update gelé, l'affichage ne se fait pas
			return false;
		}
		
		var code = this.id || this.previousElementSibling.id,
			lst = splitCode(code), //liste des propriétés
			obj = getObjectFromCode(lst), //objet
			info, //information à propos de l'objet
			elem;
		
		document.getElementById("codeJS").value = code; //affichage du code
		
		info = displayObjInformation(obj); //récupération des infos
		
		//affichage de la liste d'option
		if(typeof obj !== "object"){
			document.querySelector('option[value="nChild"]').disabled = true;
			elem = document.querySelector('option[value="nClChild"]');
			elem.disabled = true;
			elem = elem.parentNode;
			if(elem.selectedIndex<2) elem.selectedIndex = 2;
		}else{
			document.querySelector('option[value="nChild"]').disabled = false;
			document.querySelector('option[value="nClChild"]').disabled = false;
		}
		
		//affichage des infos de propriétés
		document.getElementById("pName").value = lst[lst.length-1];
		document.getElementById("pValueStatus").textContent = info[0];
		obj = JSON.stringify(obj);
		document.getElementById("pValue").value = obj;
		
		//gèle du temps éventuel
		if(e && e.type === "click"){
			frozenTime = Date.now() + 7000;
		}
	};
})();

function displayObjInformation(objet){
//permet de décrire l'objet (info sur son type, sa longueur ...)
//retourne ["info d'affichage","nb de'enfant","type de l'objet"]
	var dsp = "", //affichage
		nb, //nb d'enfant ou longueur
		type; //type
	
	if(objet === null){
		dsp = " (null)";
		type = "null";
	}else if(typeof objet === "object"){
		if(objet instanceof Array){
			nb = objet.length;
			dsp = " (Array ["+nb+"])";
			type = "Array";
		}else{
			nb = countObj(objet);
			type = typeof objet;
			dsp = " ("+type+" ["+nb+"])";
		}
	}else if(typeof objet === "string"){
		dsp = " \""+objet+"\" (string ["+objet.length+"])";
		type = "string";
	}else{
		type = typeof objet;
		dsp = " "+objet+" ("+type+")";
	}
	
	return [dsp,nb,type];
}

function jsonVerify(str,inside,offset){
//permet d'essayer de trouver les problèmes de code JSON
	var i=0,li=str.length,current,msg="",previous=inside;
	offset=offset||0;
	do{
		current=str[i];
		switch(current){
			case "{":
				if(inside==="\"" || inside==="'"){
					previous="";
					continue;
				}
				if(previous && "{}]\"';".indexOf(previous)!==-1){
					return "Character "+(i+offset+1)+": character {  should not be there.";
				}
				if(inside==="{" && previous===","){
					return "Character "+(i+offset+1)+": character { should not be placed before , when it is in an object (this object begins position "+offset+")";
				}
				
				msg=jsonVerify(str.substring(i+1),"{",i+offset+1);
				if(typeof msg ==="number"){
					i=msg-offset;
					previous="}";
				}else{
					return msg;
				}
				break;
			case "[":
				if(inside==="\"" || inside==="'"){
					previous="";
					continue;
				}
				if(previous && "{}]\"';".indexOf(previous)!==-1){
					return "Character "+(i+offset+1)+": charactere [  should not be there";
				}
				if(inside==="{" && previous===","){
					return "Character "+(i+offset+1)+": character [ should not be placed before , when it is in an object (this object begins position "+offset+")";
				}
				msg=jsonVerify(str.substring(i+1),"[",i+offset+1);
				if(typeof msg ==="number"){
					i=msg-offset;
					previous="]";
				}else{
					return msg;
				}
				break;
			case "]":
				if(inside==="\"" || inside==="'"){
					previous="";
					continue;
				}
				if(previous && "{,:;".indexOf(previous)!==-1 || inside!=="["){
					return "Character "+(i+offset+1)+": character ]  should not be there.";
				}
				return i+offset;
				break;
			case "}":
				if(inside==="\"" || inside==="'"){
					previous="";
					continue;
				}
				if(previous && "[,:;".indexOf(previous)!==-1 || inside!=="{"){
					return "Character "+(i+offset+1)+": character } should not be there.";
				}
				return i+offset;
				break;
			case "\"":
				if(inside==="'"){
					previous="";
					continue;
				}
				if(inside==="\""){
					if(previous ==="\\"){
						previous="";
					}else{
						return i+offset;
					}
				}else{
					if(previous && "}]\"';".indexOf(previous)!==-1){
						return "Character "+(i+offset+1)+": character \" should not be there";
					}
					msg=jsonVerify(str.substring(i+1),"\"",i+offset+1);
					if(typeof msg ==="number"){
						i=msg-offset;
						previous="\"";
					}else{
						return msg;
					}
				}
				break;
			case "'":
				if(inside==="\""){
					previous="";
					continue;
				}
				if(inside==="'"){
					if(previous ==="\\"){
						previous="";
					}else{
						return i+offset;
					}
				}else{
					if(previous && "}]\"';".indexOf(previous)!==-1){
						return "Character "+(i+offset+1)+": caracter ' should not be there";
					}
					msg=jsonVerify(str.substring(i+1),"'",i+offset+1);
					if(typeof msg ==="number"){
						i=msg-offset;
						previous="'";
					}else{
						return msg;
					}
				}
				break;
			
			case ",":
				if(inside==="\"" || inside==="'"){
					previous="";
					continue;
				}
				if(previous && "{[,:;".indexOf(previous)!==-1 || !inside){
					return "Character "+(i+offset+1)+": character , should not be there";
				}
				previous=",";
				break;
			case ":":
				if(inside==="\"" || inside==="'"){
					previous="";
					continue;
				}
				if(previous && "}]{[,:;".indexOf(previous)!==-1 || inside!=="{"){
					return "Character "+(i+offset+1)+": character : should not be there. In object "+inside+" position "+offset;
				}
				previous=":";
				break;
			
			case "\\":
				if(inside==="\"" || inside==="'"){
					if(previous==="\\") previous=""; else previous="\\";
				}else{
					return "Character "+(i+offset+1)+": character \\ should not be there";
				}
				break;
			default:
				if(inside==="\"" || inside==="'"){
					if(current!=="\n" && current!=="\r"){
						previous=current;
					}else{
						return "Character "+(i+offset+1)+": character end of line ("+(current==="\n"?"\\n":"\\r")+") should not be in a string. In object "+inside+" position "+offset;
					}
				}else{
					if("-1234567890".indexOf(current)!==-1 && ((inside==="{" && previous===":") || (inside==="[" && (previous==="," || previous==="[")))){
						previous=current;
					}else if("1234567890.".indexOf(current)!==-1 && "-1234567890.".indexOf(previous)!==-1){
						previous=current;
					}else{
						var ok=false;
						switch(current){
							case "n":
								if(inside==="{" && previous===":")ok="n";
								if(inside==="[" && previous===",")ok="n";
								if(inside==="[" && previous==="[")ok="n";
								break;
							case "u":
								if(previous==="n")ok="nu";
								break;
							case "l":
								if(previous==="nu")ok="nul";
								if(previous==="nul")ok="null";
								break;
							case "\n":
							case "\r":
							case "\t":
							case " ":
								ok=current;
								continue;
						}
						if(ok){
							previous=ok;
						}else{
							return "Character "+(i+offset+1)+": character "+current+" should not be there. In object "+inside+" position "+offset;
						}
						
					}
				}
		}
	}while(++i<li);
	if(inside) return "Character "+(i+offset)+": End of object not found, character "+inside+" was open at position "+offset+" and was not closed";
	else return "No problem detected";
	
}


//Fontion permettant de lire le JSON (d'afficher le messaeg d'ereur si besoin), de le transformer en objet puis lance la création de la structure HTML
function jsonReader(str,elem_id){
	var element=document.getElementById(elem_id);
	try{
		var obj=JSON.parse(str);
	}catch(e){
		var msg=jsonVerify(str,"",0),pst=(/Character (\d+).+(?:position (\d+))/i).exec(msg);
		element.innerHTML='<font color="red"><b>Format error</b></font>: '+e+"<br>"+msg+"<br><br>";
		if(pst){
			element.innerHTML+="<i>"+str.substring(0,pst[2]-1)+'<span style="color:blue;font-size:larger;">'+str.substring(pst[2]-1,pst[1]-1)+'</span><span style="color:red;font-size:larger;">'+str[pst[1]-1]+'</span>'+str.substring(pst[1])+"</i>";
		}else{
			pst=(/Character (\d+)/i).exec(msg);
			if(pst){
				element.innerHTML+="<i>"+str.substring(0,pst[1]-1)+'<span style="color:red;font-size:larger;">'+str[pst[1]-1]+'</span>'+str.substring(pst[1])+"</i>";
			}else{
				element.innerHTML+="<i>"+str+"</i>";
			}
		}
		OBJ[elem_id] = null; //sauvegarde de l'objet (annulation);
		return false;
	}
	
	OBJ[elem_id] = obj; //sauvegarde de l'objet en global;
	
	if(obj===null){
		alert("No JSON object found");
		return false;
	}
	element.innerHTML="";
	var elem=document.createElement("section");
	//elem.className="openObject";
	writeObj(obj,elem,element.id);
	element.appendChild(elem);
	
	var recherche = document.createElement("input");
	recherche.id = elem_id + "_search";
	recherche.setAttribute("list","commonSearch");
	recherche.type="text";
	recherche.title=recherche.placeholder="SEARCH: list values. Values should be written like JS objects and be separated by |\n use * to match any member\n use = to found a content value\n eg: arr[0]|arr[*]=1";
	recherche.onchange = function(){ //fonction de recherche
		zone_recherche.innerHTML="";
		if(this.value){
			var liste = this.value.split("|");
			var i=0, li=liste.length;
			var rslt=[];
			var searchComplet=[];
			var search = [];
			while(i<li){
				rslt[i]=[];
				searchComplet[i]=splitCode(liste[i].replace(/([=])/,".$1."));

				search.push(searchComplet[i][0]);
				i++;
			}
			
			function deepSch(obj,path,i,indice){ //recherche pour une colonne
				var index=indice||0,end=searchComplet[i].length,car,r,add=false;
				path = path || "";
				
				if(typeof obj !== "undefined" && obj !== null){
					while(++index<end && (typeof obj[searchComplet[i][index]] !== 'undefined')){
						path += attributeToString(searchComplet[i][index]);
						obj=obj[searchComplet[i][index]];
					}
				}else{
					index++;
				}
				
				if(index === end){
					rslt[i].push([path,displayObjInformation(obj)[0]])
				}else{
					//on vérifie si on est sur un caractère particulier
					car = searchComplet[i][index];
					switch(car){
						case "*" : //on accepte tous les attributs
							var x;
							for(x in obj){
								deepSch(obj[x], path+attributeToString(x),i,index);
							}
							break;
						case "=" : //on recherche le contenu
							r = searchComplet[i][index+1];
							add = false;
							if(obj==r){
								add = true;
							}else{
								switch(r){
									case "null":
										if(obj === null){
											add = true;
										}
										break;
									case "false":
										if(obj === false){
											add = true;
										}
										break;
									case "true":
										if(obj === true){
											add = true;
										}
										break;
									case "*":
										add = true;
										break;
									default:
										//TODO vérifier si il y a une * dans le texte
								}
							}
							
							if(add){
								//ajout de l'objet
								rslt[i].push([path,displayObjInformation(obj)[0]]);
							}
							break;
						default :
						if(/^\([^)]+\)$/.test(car)){
							//mode fonction
							
							if((r = car.match(/^\(typeof[\s=:]+([^)]+)\)$/i)) && (r[1] === typeof obj || (r[1] === "Array" && obj instanceof Array )) ){
							//typeof
								rslt[i].push([path,displayObjInformation(obj)[0]]);
							}else if((r = car.match(/^\(length[\s=:]+(\d+)\)$/i)) && obj !== null && (typeof obj === "string" || typeof obj === "object") && (obj.length || countObj(obj)) == r[1]){
							//length
								rslt[i].push([path,displayObjInformation(obj)[0]]);
							}
						}
					}
				}

			}
			
			function sch(o,path){
				var x,fromI,pth;
				path = path||"OBJ1";
				for(x in o){
					pth = path+attributeToString(x);
					fromI=0;
					while(~search.indexOf(x,fromI)){//tant qu'on trouve une occurence de x dans search
						fromI = search.indexOf(x,fromI);
						deepSch(o[x],pth,fromI,0);//recherche en profondeur car le debut correspond
						fromI++;
					}
					fromI=0;
					while(~search.indexOf("*",fromI)){//tant qu'on trouve un joker dans search
						fromI = search.indexOf("*",fromI);
						deepSch(o[x],pth,fromI,0);//recherche en profondeur car le debut correspond
						fromI++;
					}
					if(typeof o[x] === 'object'){
						sch(o[x],pth);
					}
				}
			}
			sch(obj); //recherche des éléments
			
		//affichage du résultat
			//entete
			var table = document.createElement("table");
			var row = table.insertRow(-1);
			var cel;
			var i=0,li=liste.length;
			while(i<li){
				cel = document.createElement("th");
				cel.textContent = liste[i++];
				cel.colSpan = 2;
				row.appendChild(cel);
			}
			
			//résultats
			var i=0, li=rslt.length, j=0, jContinue = false;
			do{
				jContinue = false;
				row = table.insertRow(-1);
				i=0;
				while(i<li){
					if(!jContinue && typeof rslt[i][j+1] !== "undefined") jContinue = true;
					cel = row.insertCell(-1);
					cel.textContent=typeof rslt[i][j] === "undefined" ? "":rslt[i][j][0]; //le test sert pour le cas où le nb de lignes est différent entre les recherches
					cel.onclick = gotoObjLnk;
					cel.className = "JSONLink";
					
					cel = row.insertCell(-1);
					cel.textContent=typeof rslt[i][j] === "undefined" ? "":rslt[i][j][1]; //le test sert pour le cas où le nb de lignes est différent entre les recherches
					i++;
				}
				j++;
			}while(jContinue);
			
			zone_recherche.appendChild(table);
			
			//ajout de la recherche à la liste d'aide
			setTimeout(function(str){
				var dtl = document.getElementById("commonSearch"),
					option;
				
				if(Array.prototype.some.call(dtl.options,function(opt){return opt.value === str;})) return;
				
				option = document.createElement("option");
				option.value = str;
				
				dtl.appendChild(option);
			},100,this.value);
			
		}//fin de la fonction de recherche dans un objet
	};
	
	element.appendChild(recherche);
	
	var zone_recherche = document.createElement("div");
	element.appendChild(zone_recherche);
	
	setTimeout(jsonCompare,50);
}

function gotoObjLnk(e){
//visualise un objet à partir du contenu d'un élément
	var path = e.target.textContent;
	if(path) searchObj(path);
}

function searchObj(v,idObjet,openLast){
//permet de rechercher une propriété et de la mettre en évidence
	var element=document.getElementById(idObjet),
		el,i,li,id;
  
	if(el = document.getElementById(v)){
		//l'élément existe déjà
		displayObj(el.parentNode);
		
		//mise en évidence
		Array.prototype.forEach.call(document.querySelectorAll(".highlight"),function(el){el.className = "";});
		el.className = "highlight";
		el.scrollIntoView();
	}else{
		//l'élément n'existe pas ou n'a pas encore été ouvert
		v = splitCode(v); //sépare toutes les propriétés
		
		i = 1;
		li = v.length;
		id = v[0];
		
		if(/^OBJ\d$/.test(id)){
			id += attributeToString(v[i++]);
		}else{
			if(!id) id = (idObjet || "OBJ1");
			else id = (idObjet || "OBJ1") + attributeToString(id);
		}

		while((el = document.getElementById(id)) && i<li){
			el.click();
			id += attributeToString(v[i++]);
		}
		
		if(openLast && el){
			el.click();
		}
		
		//mise en évidence
		Array.prototype.forEach.call(document.querySelectorAll(".highlight"),function(el){el.className = "";}); //suppression des précédentes mise en évidence
		if(el){
			el.className = "highlight";
			el.scrollIntoView();
			updateCodeJS.call(el); //mise à jour des info JS
		}else{
			alert('Object "'+v[--i]+'" has not been found in object "'+id.substr(0,id.length-attributeToString(v[i]).length)+'"');
		}
		
	}
	
//	alert("la recherche d'objet n'a pas encore été réalisé :(")
	return false;
};

function displayObj(el){
//permet d'afficher un objet
	while(el.style.display !== "block"){
		el.style.display = "block";
		el = el.parentNode;
	}
}

function readableJSON(str){
	var txt="";
	try{
		var txt=JSON.stringify(JSON.parse(str),null,"\t");
	}catch(e){
		txt = "";
	}
	return txt;
}

function jsonCompare(){
	var element=document.getElementById("comparaisonResult");
	element.innerHTML="";

	if(!document.getElementById("comparaisonResultDoIt").checked){
		//element.textContent = "Comparison disabled";
		return false;
	}
	
	var obj1 = document.getElementById("OBJ1");
	var obj2 = document.getElementById("OBJ2");
	
	//recherche obj1
	if(obj1.firstChild && obj1.firstChild.nodeName === "SECTION"){
		try{
			obj1 = JSON.parse(document.getElementById("source2").value);
		}catch(e){
			obj1 = JSON.parse(document.getElementById("source").value);
		}
	}else{
		obj1=null;
	}
	
	//recherche obj2
	if(obj2.firstChild && obj2.firstChild.nodeName === "SECTION"){
		try{
			obj2 = JSON.parse(document.getElementById("sourceBis2").value);
		}catch(e){
			obj2 = JSON.parse(document.getElementById("sourceBis").value);
		}
	}else{
		obj2=null;
	}
	
	if(obj1 && obj2){
		var rslt = compareObject(obj1,obj2);
		if(rslt){
			element.appendChild(rslt);
		}else{
			element.textContent = "No difference detected";
		}
	}else{
		element.textContent = "Not available while JSON codes are not readable";
	}
}

function compareObject(obj1,obj2,path,table){
//compare les 2 objets
	path = path || "";
	table = table || null;
	var x,liste=[];
	for(x in obj1){
		if(obj1.hasOwnProperty(x)){
			liste.push(x);
			if(typeof obj1[x] === typeof obj2[x]){
				if(typeof obj1[x] === "object"){
					table = compareObject(obj1[x],obj2[x],path+attributeToString(x),table);
				}else{
					if(obj1[x] !== obj2[x]){
						table = addDifference(table,path+attributeToString(x), obj1[x]+" ("+(typeof obj1[x])+")", obj2[x]+" ("+(typeof obj2[x])+")");
					}
				}
			}else{
				table = addDifference(table,path+attributeToString(x), obj1[x]+" ("+(typeof obj1[x])+")", obj2[x]+" ("+(typeof obj2[x])+")");
			}
		}
	}
	
	for(x in obj2){
		if(obj2.hasOwnProperty(x)){
			if(liste.indexOf(x) !== -1){
				continue;
			}
			if(typeof obj1[x] === typeof obj2[x]){
				if(typeof obj2[x] === "object"){
					table = compareObject(obj1[x],obj2[x],path+attributeToString(x),table);
				}else{
					if(obj1[x] !== obj2[x]){
						table = addDifference(table,path+attributeToString(x), obj1[x]+" ("+(typeof obj1[x])+")", obj2[x]+" ("+(typeof obj2[x])+")");
					}
				}
			}else{
				table = addDifference(table,path+attributeToString(x), obj1[x]+" ("+(typeof obj1[x])+")", obj2[x]+" ("+(typeof obj2[x])+")");
			}
		}
	}
	return table;
}

function addDifference(table,path,value1,value2){
//étudie les différences entre 2 JSON
	var row,cel;
	if(!table){
		table = document.createElement("table");
		row = table.insertRow(-1);
		cel = document.createElement("th");
		cel.textContent = "position";
		row.appendChild(cel);
		cel = document.createElement("th");
		cel.textContent = "Value 1";
		row.appendChild(cel);
		cel = document.createElement("th");
		cel.textContent = "Value 2";
		row.appendChild(cel);
	}
	
	row = table.insertRow(-1);
	cel = row.insertCell(-1);
	cel.textContent = path;
	
	cel = row.insertCell(-1);
	cel.textContent = value1;
	
	cel = row.insertCell(-1);
	cel.textContent = value2;
	
	return table;
}

function updateEdit(){
//permet de mettre à jour l'objet en fonction des modifications du formulaire
	var code = document.getElementById("codeJS").value, //code objet
		prpties = splitCode(code), //liste des propriétés composant le code
		obj = getObjectFromCode(prpties), //objet
		parent = getObjectFromCode(prpties,-1), //parent de l'objet
		name = document.getElementById("pName").value, //(nouveau) nom de la propriété
		value = document.getElementById("pValue").value, // nouvelle valeur
		tmp,
		elem;
	
	//analyse la valeur à ajouter
	try{
		tmp = JSON.parse('{"v":'+value+'}').v; //tmp est utilisé pour éviter de perdre la valeur originale de value (en cas d'erreur)
	}catch(e){

		//value is not valid
		if(confirm('The value should be written as JSON.\n\nDo you mean "'+value+'" ?')){
			tmp = value;
		}else{
			return null;
		}
		
	}
	value = tmp;
	
	//enlève l'ancienne propriété
	if(name !== prpties[prpties.length-1]){
		delete parent[ prpties[prpties.length-1] ];
	}
	
	//ajoute la nouvelle valeur
	parent[name] = value;
	
	//mise à jour de l'affichage
	prpties[prpties.length-1] = name;
	displayAfterEdit(prpties[0],prpties.join('.'));
}

function newPropertie(){
//crée une nouvelle propriété
	var code = document.getElementById("codeJS").value, //code objet
		prpties = splitCode(code), //liste des propriétés composant le code
		obj = getObjectFromCode(prpties), //objet
		parent = getObjectFromCode(prpties,-1), //parent de l'objet (où il faut créer la propriété)
		name, //nom de la propriété
		value = document.getElementById("pValue").value, // valeur de la nouvelle propriété
		elem;
	
	//analyse de l'action à effectuer
	switch(document.getElementById("pNNodeType").value){
		case "nChild": //nouvelle propriété
			parent = obj;
			value = null;
			prpties.push(null); //pour le focus
			break;
		case "nClChild": //nouvelle propriété en clonant le dernier enfant
			parent = obj;
			for(value in obj){} //recherche du dernier enfant
			value = JSON.stringify(obj[value]);
			console.log(value);
			prpties.push(null); //pour le focus
			break;
		case "nClSibling": //crée un frère
			break;
		default: //valeur non reconnue
			return false;
	}
	
	//mise en format du contenu
	value = JSON.parse('{"v":'+value+'}').v;
	
	//création d'un nouveau nom
	if(parent instanceof Array){
		name = parent.length;
	}else{
		name = "newProperty"+countObj(parent);
	}
	
	//ajoute la nouvelle valeur
	parent[name] = value;
	
	//mise à jour de l'affichage
	prpties[prpties.length-1] = name;
	displayAfterEdit(prpties[0],prpties.join('.'));
}

function removePropertie(){
//supprime la propriété active
	
	var code = document.getElementById("codeJS").value, //code objet
		prpties = splitCode(code), //liste des propriétés composant le code
		parent = getObjectFromCode(prpties,-1), //parent de l'objet
		name = prpties[prpties.length-1], //nom de la propriété
		value = document.getElementById("pValue").value,
		elem;
	
	//confirmation de la suppression
	if(!confirm("Propertie "+ name +" will be deleted.\nIt is located at "+code+"\n\nDo you confirm the deletion?")){
		return false;
	}
	
	//enlève l'ancienne propriété
	delete parent[name];
	
	//mise à jour de l'affichage
	prpties.pop();
	displayAfterEdit(prpties[0],prpties.join('.'));
}

function displayAfterEdit(root,code){
//mise à jour de l'affichage après une modification de l'objet
/**
 * root : nom de l'objet racine (OBJ1 ou OBJ2)
 * code : chemin de l'objet à mettre en évidence
 **/
	var elem; //référence à l'élément source
	if(root === "OBJ1"){
		elem = document.getElementById("source");
		
	}else{
		elem = document.getElementById("source2");
	}
	elem.value = JSON.stringify(OBJ[root]);
	elem.onchange(); //déclenchement de la mise à jour de l'objet
	searchObj(code,root,true); //mise en valeur de la mise à jour
}

function attributeToString(x){
//permet d'afficher le séparateur d'objet correspond à une écriture logique
	var code = "";
	
	if(x === "") return code;
	
	if(/^[^_a-z]|[^a-z0-9_]/i.test(x)){
		if(isNaN(x)){
			code='["'+x.replace(/(["\\])/g,"\\$1")+'"]';
		}else{
			code='['+x+']';
		}
	}else{
		code='.'+x;
	}
	return code;
}


//ajout des événéments aux éléments
//Sources
document.getElementById("source").onchange=function(event){
	jsonReader(this.value,'OBJ1');
	document.getElementById('source2').value=readableJSON(this.value);
};
document.getElementById("source2").onchange=function(event){
	jsonReader(this.value,'OBJ1');
	this.value=readableJSON(this.value);
};
document.getElementById("sourceBis").onchange=function(event){
	jsonReader(this.value,'OBJ2');
	document.getElementById('sourceBis2').value=readableJSON(this.value);
};
document.getElementById("sourceBis2").onchange=function(event){
	jsonReader(this.value,'OBJ2');
	this.value=readableJSON(this.value);
};
document.getElementById("codeJS").onchange=function(event){
	searchObj(this.value,'OBJ1');
};
//évenement pour cacher les blocs
document.querySelector("#javascript header").onclick = 
document.querySelector("nav header").onclick = 
	function(){
		this.classList.toggle("hide");
	};
//Edition
document.getElementById("pName").onchange = updateEdit;
document.getElementById("pValue").onchange = updateEdit;
document.getElementById("pAdd").onclick = newPropertie;
document.getElementById("pDelete").onclick = removePropertie;

//Ajout direct de la propriété display à block afin d'éviter d'aller trop loin avec la recherche d'objet
document.getElementById("OBJ1").style.display = "block";
document.getElementById("OBJ2").style.display = "block";
</script>

</body></html>

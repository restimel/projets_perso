<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html;charset=utf-8">
<title>UTF-8 characters helper</title>
<style>
#corps table{
	border:3px double;
}
#corps td{
	border:1px solid;
}
#corps th{
	font-size:0.7em;
}
#corps{
	position: absolute;
	width:100%;
}
</style>
</head>
<body>
<div id="corps">
	<aside>
		<h1>UTF-8 characters code</h1>
		<label>
			<input type="checkbox" id="hex" title="Les nombres précèdents sont entrés en hexadécimal"> Hexadécimal →
		</label>
	
		Start:<input id="start" type="number" min="0" value="65">
		End:<input id="end" type="number" min="1" value="122">
		<input type="button" id="btnDisplay" value="Display">
		<div style="position:absolute; top: 1em;right:5em;">
			<input type="text" id="search" placeholder="characters to find">
			<button id="btnSearch">Search</button><br>
			<input type="text" id="displayHTML" placeholder="HTML code" title="display symbol from HTML code like &amp;quest;">
			<button id="btnDspHTML">display HTML</button>
		</div>
		<br>
		<label title="Search HTML code">
			<input type="checkbox" id="syhtml" title="rechercher les codes HTML"> HTML
		</label>
		<hr>
	</aside>
	<div id="display">
	</div>

	<div id="search"></div>
</div>

<script type="text/javascript">
//TODO faire quelque chose pour l'affichage en HEXA pour l'input type="number"


function getHead(syhtml,searched){
	return '<tr>'+(searched?'<th title="Searched character">S</th>':'')+'<th title="Decimal value">Decimal</th><th title="Hexadecimal value">Hexa.</th><th title="Octal value">Oct.</th><th title="Symbol">Sy</th>'+(syhtml?'<th>HTML</th>':'')+'</tr>';
}

function display_symb(){
	//console.time("debug_vitesse_all");
	var base=document.getElementById("hex").checked?16:10;
	var debut=parseInt(document.getElementById("start").value,base);
	var end=parseInt(document.getElementById("end").value,base);
	var syhtml=document.getElementById("syhtml").checked;
	var txt="<table>";
	txt+=getHead(syhtml);
	for(var i=debut;i<=end;i++){
		txt+='<tr><td>'+i+'</td><td>'+i.toString(16)+'</td><td>'+i.toString(8)+'</td><td id="source'+i+'">&#'+i+';</td>'+(syhtml?'<td id="html'+i+'"><i>.</i></td>':'')+'</tr>';
	}
	txt+=getHead(syhtml);
	txt+="</table>";
	document.getElementById("display").innerHTML=txt;
	//if(syhtml) setTimeout(function(){search_HTML4(debut,end);},10);
	if(syhtml) setTimeout(function(){getHTML(debut,end);},10);

}



//recherche de codes HTML
var search_HTML4 =(function(){
	var dsearch=document.getElementById("search"),
		convert=["","a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z","A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z"],
		nbLongueur = 6,//to increase
		running = false,
		symboles={
			code:[],
			valeur:[]
		},
		elements={
			elem:[],
			valeur:[]
		};
	
	function generateList(previous){
		previous = "&"+(previous || "");
		var a=1, //id du dernier caractère
			b=1, //id de l'avant-dernier caractère
			c=previous.length===1?0:1, //id de l'avant-avant-dernier caractère
			d=convert.indexOf(previous[previous.length-1]||""),
			c2=previous+(previous.length===1?"":"a"), //liste des caractères à tester sans le dernier et l'avant-dernier
			b2=c2+"a", //liste des caractères à tester sans le dernier
			text = "";//liste générée

		//génération de la liste de test
		while(c<53){
			while(b<53){
				while(a<53){
					text+=b2+convert[a++]+";\t";
				}
				b2=c2+convert[++b];
				a=1;
			}
			c2=previous+convert[++c];
			b2=c2+convert[(b=1)];
		}
		
		return text;
	}
	
	function textEvolution(str){
		var i=str.length,
			t="";
		while(i--){
			/*if((str[i] === "z" && i && convert.indexOf(str[i-1])<27)||str[i] === "Z"){*/
			if(str[i] === "Z"){
				t+="a";
			}else{
				t = convert[convert.indexOf(str[i])+1] + t;
				return (i?str.substr(0,i):"")+t;
			}
		}
		if(str.length<nbLongueur-3){
			return "a"+t;
		}else{
			return "";
		}
	}
	
	function analyseHTML(previous){
		previous = previous || "";
		var text=generateList(previous); //liste des éléments testés ce tour ci
		
		/*if((previous = textEvolution(previous))){
			text += generateList(previous);
			/*if((previous = textEvolution(previous))){
				text += generateList(previous);
			}*//*
		}*/
		
		
		dsearch.innerHTML=text; //application de la liste de test

		var lhtml=text.split(/\t/g), //liste des codes HTML
			ltxt=dsearch.textContent.split(/\t/g), //liste des caractères générés
			li=ltxt.length,
			i=0,
			t;

		text="";
		
		do{
			if(ltxt[i].length === 1){
				//nous avons trouvé un symbole
				symboles.code[(t=symboles.code.length)]=lhtml[i];
				symboles.valeur[t]=ltxt[i];
				if(!(t%20)){
	console.log(previous + "→"+t);
					if(!(t%100)){
						displaySymbole();
					}
				}
				if(elements.elem.length){
					if(~(t=elements.valeur.indexOf(lhtml[i]))){
						elements.elem[t].textContent=lhtml[i];
						elements.valeur.splice(t,1);
						elements.elem.splice(t,1);
					}
				}
			}
		}while(++i<li);
		lhtml = null;
		ltxt = null;

		if(previous && (previous = textEvolution(previous))){
			setTimeout(function(){analyseHTML(previous);},20);
		}else{
			fin();
		}
	}
	
	function fin(){
		console.log("symboles trouvés "+symboles.code.length);
		running = false;
		var i=elements.elem.length;
		while(i--){
			elements.elem[i].textContent = "-";
		}
		//console.timeEnd("temps recherche");
		//var test=symboles.code.join("").replace(/&[a-z]+;/g,"");
		//console.log(test);
		displaySymbole();
	}
	
	function displaySymbole(){
		if(confirm("Afficher la liste des symboles trouvés ?\n"+symboles.code.length+" symboles trouvés")){
			var text="<table>";
			text+="<tr><th>HTML</th><th>caractères</th></tr>";
			var i=0,li=symboles.code.length;
			while(i<li){
				text+="<tr><td>"+symboles.code[i].replace("&","&amp;")+"</td><td>"+symboles.valeur[i++]+"</td></tr>";
			}
			text+="<textarea>"+symboles.code.join("").replace(/&/g,"")+"</textarea>";
			document.getElementById("display").innerHTML=text;
		}
	}
	
	function findElements(start,end){
		elements.elem=[];
		elements.valeur=[];
		var i=0,elem,val,t;
		while(start<=end){
			val = document.getElementById("source"+start).textContent;
			elem = document.getElementById("html"+start);
			if(~(t=symboles.valeur.indexOf(val))){
				elem.textContent = symboles.code[t];
			}else{
				elements.elem[i]=elem;
				elements.valeur[i++]=val;
				elem.textContent = running?"?":"-";
			}
			start++;
		}
	}

	
	//console.time("temps recherche");
	running =true;
	//analyseHTML("aaa");
	
	return findElements;
})();

var getHTML = function(start,end){
	var listeCode="ac;af;ap;dd;ee;eg;el;ge;gg;gl;gt;gE;ic;ii;in;it;le;lg;ll;lt;lE;mp;mu;ne;ni;nu;or;oS;pi;pm;pr;rx;sc;wp;wr;xi;DD;Gg;Gt;GT;Im;Ll;Lt;LT;Mu;Nu;Or;Pi;Pr;Re;Sc;Xi;acd;acy;amp;and;ang;ape;apE;ast;bcy;bot;cap;chi;cir;cup;dcy;deg;die;div;dot;ecy;egs;ell;els;eng;eta;eth;fcy;gap;gcy;gel;geq;ges;ggg;gla;glj;glE;gne;gnE;gEl;icy;iff;int;jcy;kcy;lap;lat;lcy;leg;leq;les;lgE;lne;lnE;loz;lrm;lsh;lEg;map;mcy;mho;mid;nap;ncy;nge;ngt;nis;niv;nle;nlt;not;npr;nsc;num;ocy;ogt;ohm;olt;ord;orv;par;pcy;phi;piv;pre;prE;psi;rcy;reg;rho;rlm;rsh;sce;scy;scE;shy;sim;smt;sol;squ;sub;sum;sup;tau;tcy;top;ucy;uml;vcy;vee;ycy;yen;zcy;zwj;Acy;And;AMP;Bcy;Cap;Cfr;Chi;Cup;Dcy;Del;Dot;Ecy;Eta;ENG;ETH;Fcy;Gcy;Hat;Hfr;Icy;Ifr;Int;Jcy;Kcy;Lcy;Lsh;Map;Mcy;Ncy;Not;Ocy;Pcy;Phi;Psi;Rcy;Rfr;Rho;Rsh;REG;Scy;Sub;Sum;Sup;Tav;Tcz;Ucz;Vcz;Vef;Ycz;Zcz;Zfs;ande;andw;angf;apie;apot;aumm;bbrl;betb;beti;bnou;boxi;boxw;boxI;boxW;bsin;bsom;bulm;bumq;bNou;cdot;cent;chcy;circ;cire;cirE;comp;cong;copy;csub;csup;darr;dash;diam;djcy;dscy;dsol;dtri;dzcy;dArr;dHar;ecir;edot;emsp;ensp;epar;epsi;escr;esim;euml;euro;excl;eDot;flat;fnof;fork;gdot;geqq;gjcy;gnap;gneq;gscr;gsim;gtcc;half;harr;hbar;hArr;iecy;imof;iocy;iota;isin;iuml;khcy;kjcy;lang;larr;late;lcub;ldca;ldsh;leqq;ljcy;lnap;lneq;lozf;lpar;lsim;lsqb;ltcc;ltri;lArr;lHar;macr;male;malt;mlcp;mldr;nbsp;ncap;ncup;ngeq;ngtr;nisd;njcy;nldr;nleq;nmid;npar;nsim;nsub;nsup;ntgl;ntlg;oast;ocir;odiv;odot;ogon;oint;omid;opar;ordf;ordm;oror;oscr;osol;ouml;para;part;perp;phiv;plus;prap;prec;prnE;prod;prop;qint;quot;rang;rarr;rcub;rdca;rdsh;real;rect;rhov;ring;rpar;rsqb;rtri;rArr;rHar;scap;scnE;sdot;sect;semi;sext;shcy;sime;simg;siml;smid;smte;solb;spar;squf;star;sube;subE;succ;sung;supe;supE;tbrk;tdot;tint;toea;tosa;trie;tscy;uarr;upsi;utri;uuml;uArr;uHar;varr;vert;vArr;vBar;xcap;xcup;xmap;xnis;xvee;yacy;yicy;yucy;yuml;zdot;zeta;zhcy;zwnj;Auml;Barv;Beta;Bscr;Cdot;Copf;CHcy;COPY;Darr;DJcy;DScy;DZcy;Edot;Escr;Esim;Euml;Fscr;Gdot;GJcy;Hopf;Hscr;Idot;Iota;Iscr;Iuml;IEcy;IOcy;KHcy;KJcy;Lang;Larr;Lscr;LJcy;Mscr;Nopf;NJcy;Ouml;Popf;Qopf;QUOT;Rang;Rarr;Ropf;Rscr;Sqrt;Star;SHcy;TScy;Uarr;Upsi;Uuml;Vbar;Vert;Yuml;YAcy;YIcy;YUcy;Zdot;Zeta;Zopf;ZHcy;acirc;acute;aelig;aleph;alpha;amacr;amalg;angle;angrt;angst;aogon;aring;asymp;awint;bcong;bdquo;bepsi;blank;block;boxdl;boxdr;boxdL;boxdR;boxhd;boxhu;boxhD;boxhU;boxul;boxur;boxuL;boxuR;boxvh;boxvl;boxvr;boxvH;boxvL;boxvR;boxDl;boxDr;boxDL;boxDR;boxHd;boxHu;boxHD;boxHU;boxUl;boxUr;boxUL;boxUR;boxVh;boxVl;boxVr;boxVH;boxVL;boxVR;breve;bsemi;bsime;bsolb;bumpe;bumpE;caret;caron;ccaps;ccirc;ccups;cedil;check;clubs;colon;comma;crarr;cross;csube;csupe;ctdot;cuepr;cuesc;cupor;cuvee;cuwed;cwint;dashv;dblac;ddarr;delta;dharl;dharr;diams;disin;doteq;dtdot;dtrif;duarr;duhar;ecirc;efDot;emacr;empty;eogon;eplus;epsiv;eqsim;equiv;erarr;erDot;esdot;exist;eDDot;fflig;filig;fllig;fltns;forkv;frasl;frown;gamma;gcirc;gescc;gimel;gneqq;gnsim;grave;gsime;gsiml;gtcir;gtdot;harrw;hcirc;hoarr;icirc;iexcl;iiint;iiota;ijlig;imacr;image;imath;imped;infin;iogon;iprod;isins;isinv;isinE;iukcy;jcirc;jmath;jukcy;kappa;langd;laquo;larrb;lbarr;lbbrk;lbrke;lceil;ldquo;lescc;lhard;lharu;lhblk;llarr;lltri;lneqq;lnsim;loang;loarr;lobrk;lopar;lrarr;lrhar;lrtri;lsime;lsimg;lsquo;ltcir;ltdot;ltrie;ltrif;lAarr;lBarr;mdash;micro;minus;mumap;mDDot;nabla;napos;natur;ncong;ndash;nearr;neArr;ngsim;nharr;nhpar;nhArr;nlarr;nless;nlsim;nltri;nlArr;notin;notni;nprec;nrarr;nrtri;nrArr;nsime;nsmid;nspar;nsube;nsucc;nsupe;numsp;nwarr;nwArr;ocirc;odash;oelig;ofcir;ohbar;olarr;olcir;oline;omacr;omega;operp;oplus;orarr;order;ovbar;parsl;phone;plusb;pluse;pound;prcue;prime;prnap;prsim;quest;radic;rangd;range;raquo;rarrb;rarrc;rarrw;ratio;rbarr;rbbrk;rbrke;rceil;rdquo;reals;rhard;rharu;rlarr;rlhar;rnmid;roang;roarr;robrk;ropar;rrarr;rsquo;rtrie;rtrif;rAarr;rBarr;sbquo;sccue;scirc;scnap;scsim;sdotb;sdote;searr;setmn;seArr;sharp;sigma;simeq;simgE;simlE;simne;slarr;smile;sqcap;sqcup;sqsub;sqsup;srarr;starf;strns;subne;subnE;supne;supnE;swarr;swArr;szlig;theta;thkap;thorn;tilde;times;trade;trisb;tshcy;twixt;ubrcy;ucirc;udarr;udhar;uharl;uharr;uhblk;ultri;umacr;uogon;uplus;upsih;uring;urtri;utdot;utrif;uuarr;varpi;vdash;veeeq;vltri;vprop;vrtri;vBarv;vDash;wcirc;wedge;xcirc;xdtri;xharr;xhArr;xlarr;xlArr;xodot;xrarr;xrArr;xutri;ycirc;Acirc;Alpha;Amacr;Aogon;Aring;AElig;Breve;Ccirc;Colon;Cross;Dashv;Delta;Ecirc;Emacr;Eogon;Equal;Gamma;Gcirc;Hacek;Hcirc;Icirc;Imacr;Iogon;Iukcy;IJlig;Jcirc;Jukcy;Kappa;Ocirc;Omacr;Omega;OElig;Prime;RBarr;Scirc;Sigma;Theta;Tilde;THORN;TRADE;TSHcy;Ubrcy;Ucirc;Umacr;Union;Uogon;UpTee;Uring;Vdash;VDash;Wcirc;Wedge;Ycirc;aacute;abreve;agrave;andand;angmsd;angsph;apacir;approx;atilde;barvee;barwed;becaus;bernou;bigcap;bigcup;bigvee;bkarow;bottom;bowtie;boxbox;bprime;brvbar;bullet;bumpeq;cacute;capand;capcap;capcup;capdot;ccaron;ccedil;circeq;cirmid;colone;commat;compfn;conint;coprod;copysr;cularr;cupcap;cupcup;cupdot;curarr;curren;cylcty;dagger;daleth;dcaron;dfisht;divide;divonx;dlcorn;dlcrop;dollar;drcorn;drcrop;dstrok;eacute;easter;ecaron;ecolon;egrave;egsdot;elsdot;emptyv;eparsl;eqcirc;equals;equest;female;ffilig;ffllig;forall;gacute;gammad;gbreve;gesdot;gesles;gtlPar;gtrarr;gtrdot;gtrsim;hairsp;hamilt;hardcy;hearts;hellip;hercon;homtht;horbar;hslash;hstrok;hybull;hyphen;iacute;igrave;iiiint;iinfin;incare;inodot;intcal;iquest;isinsv;itilde;jsercy;kappav;kcedil;kgreen;lacute;lagran;lambda;langle;larrfs;larrhk;larrlp;larrpl;larrtl;latail;lbrace;lbrack;lcaron;lcedil;ldquor;lesdot;lesges;lfisht;lfloor;lharul;llhard;lmidot;lmoust;loplus;lowast;lowbar;lparlt;lrhard;lsaquo;lsquor;lstrok;lthree;ltimes;ltlarr;ltrPar;lAtail;mapsto;marker;mcomma;midast;midcir;middot;minusb;minusd;mnplus;models;mstpos;nacute;ncaron;ncedil;nearhk;nequiv;nesear;nexist;nltrie;nprcue;nrtrie;nsccue;nsimeq;ntilde;numero;nvdash;nvlArr;nvrArr;nvDash;nvHarr;nwarhk;nwnear;nVdash;nVDash;oacute;odblac;odsold;ograve;ominus;origof;oslash;otilde;otimes;parsim;percnt;period;permil;phmmat;planck;plankv;plusdo;plusdu;plusmn;preceq;primes;prnsim;propto;prurel;puncsp;qprime;racute;rangle;rarrap;rarrfs;rarrhk;rarrlp;rarrpl;rarrtl;ratail;rbrace;rbrack;rcaron;rcedil;rdquor;rfisht;rfloor;rharul;rmoust;roplus;rpargt;rsaquo;rsquor;rthree;rtimes;rAtail;sacute;scaron;scedil;scnsim;searhk;seswar;sfrown;shchcy;sigmaf;sigmav;simdot;smashp;softcy;solbar;spades;sqsube;sqsupe;square;squarf;ssetmn;ssmile;sstarf;subdot;subset;subsim;subsub;subsup;succeq;supdot;supset;supsim;supsub;supsup;swarhk;swnwar;target;tcaron;tcedil;telrec;thetav;thinsp;thksim;timesb;timesd;topbot;topcir;tprime;tridot;tstrok;uacute;ubreve;udblac;ufisht;ugrave;ulcorn;ulcrop;urcorn;urcrop;utilde;vangrt;varphi;varrho;veebar;vellip;verbar;wedbar;wedgeq;weierp;wreath;xoplus;xotime;xsqcup;xuplus;xwedge;yacute;zacute;zcaron;zeetrf;Aacute;Abreve;Agrave;Assign;Atilde;Barwed;Bumpeq;Cacute;Ccaron;Ccedil;Colone;Conint;CupCap;Dagger;Dcaron;DotDot;Dstrok;Eacute;Ecaron;Egrave;Exists;ForAll;Gammad;Gbreve;Gcedil;Hstrok;HARDcy;Iacute;Igrave;Itilde;Jsercy;Kcedil;Lacute;Lambda;Lcaron;Lcedil;Lmidot;Lstrok;Nacute;Ncaron;Ncedil;Ntilde;Oacute;Odblac;Ograve;Oslash;Otilde;Otimes;Racute;Rarrtl;Rcaron;Rcedil;Sacute;Scaron;Scedil;Square;Subset;Supset;SHCHcy;SOFTcy;Tcaron;Tcedil;Tstrok;Uacute;Ubreve;Udblac;Ugrave;Utilde;Vdashl;Verbar;Vvdash;Yacute;Zacute;Zcaron;",
		listeValeur=[];
	listeCode="&"+listeCode.replace(/;/g,";\t&").replace(/;\t&$/,";");
	document.getElementById("search").innerHTML=listeCode;
	listeCode=listeCode.split("\t");
	listeValeur=document.getElementById("search").textContent.split("\t");
	document.getElementById("search").innerHTML=""; //pour éviter de garder un texte trop long en mémoire
	
	function getElements(start,end){
		var i=0,
			source=[],
			html=[],
			elem,val,t;
		start--;
		while(++start<=end){
			val = document.getElementById("source"+start);
			if(!val){
				continue;
			}
			val = val.textContent;
			elem = document.getElementById("html"+start);
			if(!elem){
				continue;
			}
			source[i] = val;
			html[i++] = elem;
		}
		return [source,html];
	}
	
	getHTML = function(source,html){
		var i,t;
		if(!(source instanceof Array)){
			t = getElements(source,html);
			source = t[0];
			html = t[1];
		}
		i=source.length;
		
		while(i--){
			if(~(t=listeValeur.indexOf(source[i]))){
				html[i].textContent = listeCode[t];
			}else{
				html[i].textContent = "-";
			}
		}
	};
	return getHTML(start,end);
};

function search_symb(){
	var liste_car=document.getElementById("search").value;
	var syhtml=document.getElementById("syhtml").checked;
	var result=[];
	//créer le tableau de symbole
	var i=0,li=liste_car.length;
	while(i<li){
		result[i]=[liste_car[i],liste_car.charCodeAt(i)];
		i++;
	}

	//affiche le resultat
	var txt="<table>";
	txt+=getHead(syhtml,true);
	for(i=0;i<li;i++){
		txt+='<tr><td>'+result[i][0]+'</td><td>'+result[i][1]+'</td><td>'+result[i][1].toString(16)+'</td><td>'+result[i][1].toString(8)+'</td><td id="source'+i+'">&#'+result[i][1]+';</td>'+(syhtml?'<td id="html'+i+'"><i>.</i></td>':'')+'</tr>';
	}
	txt+=getHead(syhtml,true);
	txt+="</table>";
	document.getElementById("display").innerHTML=txt;
	if(syhtml) setTimeout(function(){getHTML(0,li-1);},10);
}

function display_html(){
	var html = document.getElementById("displayHTML").value.replace(/</g,"&gt;");
	document.getElementById("display").innerHTML=html;
}

//ajout des événements sur les éléments
document.getElementById("btnDisplay").onclick=display_symb;
document.getElementById("btnSearch").onclick=search_symb;
document.getElementById("btnDspHTML").onclick=display_html;
</script>
</body>
</html>

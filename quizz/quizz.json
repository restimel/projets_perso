{"quizz":[
{"id":1,"theme":["comparaison"],"niveau":1,"code":"var i=0,j=0,k=0,l=0;\nwhile(i++<1){\n    j++;\n}\n\ndo{\n    k++;\n}while(l++<1);\nalert(i+\"/\"+j+\"/\"+k+\"/\"+l);","reponses":["\"0/0/1/1\"","\"0/0/1/2\"","\"0/0/2/2\"","\"0/1/1/1\"","\"0/1/1/2\"","\"0/1/2/2\"","\"1/0/1/1\"","\"1/0/1/2\"","\"1/0/2/2\"","\"1/1/1/1\"","\"1/1/1/2\"","\"1/1/2/2\"","Il y a une erreur de syntaxe"],"bonneReponse":"\"1/1/2/2\"","explication":""},
{"id":2,"theme":["boucle"],"niveau":0,"code":"var i=1;\nwhile(i<10){\n\ti++;\n\ti++;\n}\nalert(i);","reponses":["1","9","10","11","20","l'alert ne sera jamais appelée"],"bonneReponse":"11","explication":""},
{"id":3,"theme":["opération"],"niveau":1,"code":"var i = true;\nvar j = 0;\nalert(i/j);","reponses":["0","1","Infinity","-Infinity","NaN","undefined","une erreur de syntaxe"],"bonneReponse":"Infinity","explication":""},
{"id":4,"theme":["opération"],"niveau":1,"code":"var i = 0;\nvar j = 0;\nalert(i/j);","reponses":["0","1","Infinity","-Infinity","NaN","undefined","une erreur de syntaxe"],"bonneReponse":"NaN","explication":""},
{"id":5,"theme":["opération"],"niveau":1,"code":"var a = 1;\nvar b = 2;\nvar c = a+++b;\nalert(a+\" \"+b+\" \"+c);","reponses":["1 2 3","1 3 3","1 3 4","2 2 3","2 2 4","1 2 NaN","1 2 undefined","Il y a une erreur de syntaxe"],"bonneReponse":"2 2 3","explication":""},
{"id":6,"theme":["opération"],"niveau":2,"code":"\talert(typeof 1/0);","reponses":["\"number\"","\"object\"","\"string\"","\"undefined\"","Infinity","NaN","Il y a une erreur de syntaxe"],"bonneReponse":"NaN","explication":""},
{"id":7,"theme":["opération"],"niveau":0,"code":"var number1 = \"2\", number2 = \"3\", resultat;\nresultat = number1 + number2;\nalert(resultat);","reponses":["5","6","23","NaN","undefined","ERROR"],"bonneReponse":"23","explication":""},
{"id":8,"theme":["opération"],"niveau":1,"code":"var calcul = \"6\" + \"5\" *2;\nalert(parseInt(calcul, 10));","reponses":["16","22","58","112","130","610","652","NaN","Il y a une erreur de syntaxe"],"bonneReponse":"610","explication":""},
{"id":9,"theme":["opération"],"niveau":2,"code":"var i = Math.pow(2,53);\nvar j = i+1;\nvar k = i-1;\n\nalert( (i===j) +\" \"+ (i===k) );","reponses":["false false","false true","true false","true true","une erreur de syntaxe"],"bonneReponse":"true false","explication":"Selon la norme IEEE 754, les nombres restent précis à l'unité près jusqu'à 2<sup>53</sup>. Au delà il faut prendre en compte la partie multiplicative (qui est codée sur 10 bits) et donc les nombres ne sont précis qu'à cette partie multiplicative près.<br>\n\tPour en savoir plus : Ecmascript-262 edition 5.1 chapitre 8.5"},
{"id":10,"theme":["objet"],"niveau":3,"code":"function Constructeur(valeur){\n\tthis.f = function(valeur){\n\t\tthis.get = function(valeur){\n\t\t\treturn this.calcul();\n\t\t};\n\t};\n\tthis.calcul = function(){\n\t\treturn valeur;\n\t};\n}\n\nvar obj1 = new Constructeur(1),\n\tobj2 = new obj1.f(2);\nalert(obj2.get(3));","reponses":["1","2","3","undefined","rien, une erreur est survenue"],"bonneReponse":"rien, une erreur est survenue","explication":""},
{"id":11,"theme":["objet"],"niveau":2,"code":"\tfunction Type1(){}\n\tType1.prototype.affiche = function(){\n\t\tvar name = \"undefined\";\n\t\tif(this.constructor == Type1){\n\t\t\tname=\"Type1\";\n\t\t}\n\t\tif(this.constructor == Type2){\n\t\t\tname=\"Type2\";\n\t\t}\n\t\talert(Type1.name);\n\t\talert(Type2.constructor.name);\n\t\talert(this.constructor.name);\n\t\treturn name+\"-\"+this.valeur;\n\t};\n\tType1.prototype.valeur = \"type1\";\n\t\n\tfunction Type2(){}\n\tType2.prototype = new Type1();\n\tType2.prototype.valeur = \"type2\";\n\t\n\tvar obj2 = new Type2();\n\talert(obj2.affiche());","reponses":["\"Type1-type1\"","\"Type1-type2\"","\"Type2-type1\"","\"Type2-type2\"","\"undefined-type1\"","\"undefined-type2\"","Il y a une erreur de syntaxe"],"bonneReponse":"\"Type1-type2\"","explication":""},
{"id":12,"theme":["objet"],"niveau":2,"code":"var myNamespace = {\n  \n  subNamespace1: {\n    \n    function1: function() {\n    \tvar valeur = 0;\n      myNamespace.subNamespace2.function2();\n    },\n    valeur : 1\n    \n  },\n  \n  subNamespace2: {\n    \n    function2: function() {\n    \tvar valeur = 2;\n      alert(this.valeur);\n    },\n    valeur : 3\n    \n  },\n  valeur : 4\n  \n};\nmyNamespace.subNamespace1.function1();","reponses":["0","1","2","3","4","undefined","ERROR"],"bonneReponse":"3","explication":"<minicode type=\"javascript\">identite</minicode> est un objet qui ne possède qu'une seule propriété : <minicode type=\"javascript\">nom</minicode>.\n\tDu coup la propriété <minicode type=\"javascript\">prenom</minicode> n'existe pas, il retourne donc <minicode type=\"javascript\">undefined</minicode>.\n\n\tPour obtenir <minicode type=\"javascript\">\"Jean Dupont\"</minicode>, il aurait fallu écrire <minicode type=\"javascript\">alert(identie.nom);</minicode>\n\tPour obtenir <minicode type=\"javascript\">\"Jean\"</minicode>, il aurait fallu ajouter une propriété <minicode type=\"javascript\">prenom</minicode> ayant pour valeur <minicode type=\"javascript\">\"Jean\"</minicode> ; ou alors le récupérer depuis la propriété <minicode type=\"javascript\">nom</minicode>, par exemple <minicode type=\"javascript\">alert(identite.nom.split(\" \")[0]);</minicode>\n\tEt de même pour obtenir <minicode type=\"javascript\">\"Dupont\"</minicode> (en utilisant l'index 1 à la place de 0)."},
{"id":13,"theme":["objet"],"niveau":3,"code":"function Constructeur(){\n\tthis.f = function(){};\n}\n\nvar obj1 = new Constructeur(),\n\tobj2 = new Constructeur(),\n\tobj3 = new obj1.f();\nalert(obj3 instanceof obj2.f);","reponses":["false","true","undefined","rien, une erreur est survenue"],"bonneReponse":"false","explication":""},
{"id":14,"theme":["objet"],"niveau":2,"code":"var obj = {};\nobj.prototype = {val:1};\nobj.constructor.prototype = {val:2};\n\nalert(obj.val);","reponses":["1","2","undefined","rien, une erreur est survenue"],"bonneReponse":"undefined","explication":""},
{"id":15,"theme":["objet"],"niveau":5,"code":"function Constructeur(){\n\tfunction getValue(){\n\t\treturn \"A\";\n\t}\n\tvar obj = {};\n\tobj.getValue = function(){\n\t\treturn \"B\";\n\t};\n\tthis.getValue = function(){\n\t\treturn \"C\";\n\t};\n\t\n\treturn obj;\n}\n\nConstructeur.prototype.getValue = function(){\n\treturn \"D\";\n};\n\nfunction getValue(){\n\treturn \"E\";\n}\n\nvar obj = new Constructeur();\nalert(obj.getValue());","reponses":["\"A\"","\"B\"","\"C\"","\"D\"","\"E\"","rien, une erreur est survenue"],"bonneReponse":"\"B\"","explication":""},
{"id":16,"theme":["objet"],"niveau":5,"code":"function Constructeur(){\n\treturn new Constructeur2();\n}\n\nfunction Constructeur2(){\n}\n\nvar obj = new Constructeur();\nalert(obj instanceof Constructeur);","reponses":["false","true","undefined","rien, une erreur est survenue"],"bonneReponse":"false","explication":""},
{"id":17,"theme":["objet"],"niveau":2,"code":"\tfunction Type1(){}\n\tType1.prototype.affiche = function(){\n\t\treturn this.valeur;\n\t};\n\tType1.prototype.valeur = \"type1\";\n\t\n\tfunction Type2(){}\n\tType2.prototype = Type1.prototype;\n\tType2.prototype.valeur = \"type2\";\n\t\n\tvar obj1 = new Type1();\n\tvar obj2 = new Type2();\n\talert(obj1.affiche());\n\talert(obj2.affiche());","reponses":["\"type1\" puis \"type1\"","\"type1\" puis \"type2\"","\"type2\" puis \"type1\"","\"type2\" puis \"type2\"","\"type1\" une seule fois","\"type2\" une seule fois","rien, une erreur est survenue avant le premier affichage"],"bonneReponse":"\"type2\" puis \"type2\"","explication":""},
{"id":18,"theme":["objet"],"niveau":2,"code":"function Constructeur(){\n}\nConstructeur.prototype.val = 0;\nConstructeur.prototype = {val:1};\nConstructeur.prototype.val = 2;\n\nvar obj1 = new Constructeur();\n\nConstructeur.prototype.val = 3;\nConstructeur.prototype = {val:4};\nConstructeur.prototype.val = 5;\n\nalert(obj1.val);","reponses":["0","1","2","3","4","5","undefined","rien, une erreur est survenue"],"bonneReponse":"3","explication":""},
{"id":19,"theme":["objet"],"niveau":0,"code":"var identite = {nom : \"Jean Dupont\"};\nalert(identite.prenom);","reponses":["\"Jean\"","\"Dupont\"","\"Jean Dupont\"","\"\"","undefined","rien, une erreur est survenue"],"bonneReponse":"undefined","explication":"<minicode type=\"javascript\">identite</minicode> est un objet qui ne possède qu'une seule propriété : <minicode type=\"javascript\">nom</minicode>.\n\tDu coup la propriété <minicode type=\"javascript\">prenom</minicode> n'existe pas, il retourne donc <minicode type=\"javascript\">undefined</minicode>.\n\n\tPour obtenir <minicode type=\"javascript\">\"Jean Dupont\"</minicode>, il aurait fallu écrire <minicode type=\"javascript\">alert(identie.nom);</minicode>\n\tPour obtenir <minicode type=\"javascript\">\"Jean\"</minicode>, il aurait fallu ajouter une propriété <minicode type=\"javascript\">prenom</minicode> ayant pour valeur <minicode type=\"javascript\">\"Jean\"</minicode> ; ou alors le récupérer depuis la propriété <minicode type=\"javascript\">nom</minicode>, par exemple <minicode type=\"javascript\">alert(identite.nom.split(\" \")[0]);</minicode>\n\tEt de même pour obtenir <minicode type=\"javascript\">\"Dupont\"</minicode> (en utilisant l'index 1 à la place de 0)."},
{"id":20,"theme":["fonction"],"niveau":3,"code":"function affMessage(condition){\n\tif(condition){\n\t\tfunction leMessage(){\n\t\t\talert(\"Bonjour\");\n\t\t}\n\t}else{\n\t\tfunction leMessage(){\n\t\t\talert(\"Bonsoir\");\n\t\t}\n\t}\n\tleMessage();\n}\n\naffMessage(true);\naffMessage(false);","reponses":["rien","\"Bonjour\" puis \"Bonsoir\"","\"Bonsoir\" puis \"Bonjour\"","\"Bonjour\" puis \"Bonjour\"","\"Bonsoir\" puis \"Bonsoir\""],"bonneReponse":"\"Bonsoir\" puis \"Bonsoir\"","explication":""},
{"id":21,"theme":["fonction"],"niveau":2,"code":"var compteur = 0;\n\nvar f = function(){\n\tcompteur++;\n\tsetTimeout(f,10);\n\treturn function(){\n\t\tcompteur++;\n\t};\n}();\n\nsetTimeout(function(){\n\talert(compteur);\n},200);","reponses":["Rien","0","1","2","3","4","NaN","Une erreur se produit"],"bonneReponse":"1","explication":"Lorsque <minicode type=\"javascript\">f</minicode> est déclarée, on lui affecte le résultat d'une \"function expression\". En exécutant cette fonction, on commence par incrémenter <minicode type=\"javascript\">compteur</minicode> puis on lance la fonction <minicode type=\"javascript\">f</minicode> 10ms plus tard. Or à ce moment <minicode type=\"javascript\">f</minicode> n'est toujours pas définie, bien que <minicode type=\"javascript\">f</minicode> sera définie dans 10ms <minicode type=\"javascript\">setTimeout</minicode> ne s'exécute pas mais ne provoque pas d'erreur. <minicode type=\"javascript\">compteur</minicode> n'a donc été incrémentée qu'une seule fois."},
{"id":22,"theme":["fonction"],"niveau":2,"code":"var type = \"abc\";\n\nfunction f(type){\n\talert(this.type);\n}\n\nvar r = f.bind({\n\tclick:function(){alert(\"def\");},\n\tload:function(){alert(\"ghi\");},\n\ttype:\"click\",\n\tjkl:function(){alert(\"mno\");}\n});\n\nr(\"jkl\");","reponses":["rien","\"abc\"","\"def\"","\"ghi\"","\"jkl\"","\"mno\"","\"click\"","undefined","Une erreur se produit"],"bonneReponse":"\"click\"","explication":""},
{"id":23,"theme":["fonction"],"niveau":1,"code":"var compteur = 0;\n\nvar f = function(){\n\tcompteur++;\n\tf();\n\treturn function(){\n\t\tcompteur++;\n\t};\n}();\n\nalert(compteur);","reponses":["0","1","2","3","4","NaN","Une erreur se produit"],"bonneReponse":"Une erreur se produit","explication":"Lorsque <minicode type=\"javascript\">f</minicode> est déclarée, on lui affecte le résultat d'une \"function expression\". En exécutant cette fonction, on commence par incrémenter <minicode type=\"javascript\">compteur</minicode> puis on lance la fonction <minicode type=\"javascript\">f</minicode>. Or à ce moment <minicode type=\"javascript\">f</minicode> n'est toujours pas définie. Une erreur se produit alors puisque <minicode type=\"javascript\">f</minicode> ne fait pas référence à une fonction."},
{"id":24,"theme":["Array"],"niveau":2,"code":"var liste = [0, 1, 2, 3];\nliste.length = 5;\nliste.push(4);\nalert(liste[4]);","reponses":["0","4","\"\"","null","NaN","undefined","Il y a une erreur de syntaxe"],"bonneReponse":"undefined","explication":"push ajoute à un élément à la dernière position. La dernière position est indiquée par l'attribut length. Or celui-ci a été modifié. La valeur 4 est donc ajouté à l'index 5. Et la valeur située à l'index 4 est n'est toujours pas définie et vaut donc undefined."},
{"id":25,"theme":["Array"],"niveau":2,"code":"var liste = [0, 1, 2, 3, 4, 5];\nliste.length = 4;\nalert(liste[4]);","reponses":["0","3","4","5","\"\"","NaN","undefined","Il y a une erreur de syntaxe"],"bonneReponse":"undefined","explication":"length est un attribut éditable. Lorsque celui-ci est modifié les éléments situés après sont supprimés. Si on essaie d'y accéder on obtient donc undefined."},
{"id":26,"theme":["Array"],"niveau":1,"code":"var liste = [0, 1, 2, 3];\nliste.length = 5;\nalert(liste[4]);","reponses":["0","4","\"\"","null","NaN","undefined","Il y a une erreur de syntaxe"],"bonneReponse":"undefined","explication":"length est un attribut éditable. Lorsque celui-ci est modifié les éléments situés avant ne sont pas modifié et aucune variable ou objet n'est créé. Du coup la valeur à l'index 4 n'est toujours pas définie et vaut donc undefined."},
{"id":27,"theme":["Array"],"niveau":1,"code":"var liste = [1024, 512, 32].sort();\nalert(liste.join(\",\"));","reponses":["32,512,1024","32,1024,512","512,32,1024","512,1024,32","1024,32,512","1024,512,32","Il y a une erreur de syntaxe"],"bonneReponse":"1024,32,512","explication":"Le fonctionnement par défaut de Sort agit sur les string. Ainsi les number sont convertit en string et sont triés. Or 1 est avant 3 et donc 1024 avant 32."},
{"id":28,"theme":["regexp"],"niveau":2,"code":"var r = /(?<=[a-z])/gi;\nvar s =\"Des questions\";\nalert(s.replace(r,\"@\"));","reponses":["\"Des questions\"","\"@ @\"","\"@@@ @@@@@@@@@\"","\"@es questions\"","\"@Des questions\"","\"@Des @questions\"","\"@D@e@s @q@u@e@s@t@i@o@n@s\"","\"D@e@s@ q@u@e@s@t@i@o@n@s@\"","\"@D@e@s@ @q@u@e@s@t@i@o@n@s@\"","Une erreur se produit"],"bonneReponse":"Une erreur se produit","explication":"Les assertions arrières (?&lt;=) et (?&lt;!) ne sont pas supportées en JavaScript."},
{"id":29,"theme":["regexp"],"niveau":2,"code":"var r = /(?=[a-z])/gi;\nvar s =\"Des questions\";\nalert(s.replace(r,\"@\"));","reponses":["\"Des questions\"","\"@ @\"","\"@@@ @@@@@@@@@\"","\"@es questions\"","\"@Des questions\"","\"@Des @questions\"","\"@D@e@s @q@u@e@s@t@i@o@n@s\"","\"D@e@s@ q@u@e@s@t@i@o@n@s@\"","\"@D@e@s@ @q@u@e@s@t@i@o@n@s@\"","Une erreur se produit"],"bonneReponse":"\"@D@e@s @q@u@e@s@t@i@o@n@s\"","explication":""},
{"id":30,"theme":["regexp"],"niveau":1,"code":"var r = /^[a-z \\-\\^]+$/;\nvar s =\"ceci]est mon texte\";\nalert(r.test(s));","reponses":["false","true","undefined","une erreur se produit"],"bonneReponse":"false","explication":""},
{"id":31,"theme":["regexp"],"niveau":1,"code":"var r = /[a-z]+?/g;\nvar s =\"Des questions\";\nalert(s.replace(r,\"@\"));","reponses":["\"Des questions\"","\"@\"","\"@ @\"","\"@es questions\"","\"D@s questions\"","\"@ questions\"","\"Des @\"","\"D@ @\"","\"D@@ @@@@@@@@@\"","\"@@@ @@@@@@@@@\"","Une erreur se produit"],"bonneReponse":"\"D@@ @@@@@@@@@\"","explication":""},
{"id":32,"theme":["regexp"],"niveau":1,"code":"var r = new RegExp(\"/test/\",\"g\");\nvar s =\"Test d'un test pour tester\";\nalert(s.match(r)+\"\");","reponses":["Test","test","test,test","Test,test,test","null","Une erreur se produit"],"bonneReponse":"null","explication":"Pour créer une ReGexp on peut soit utiliser la notation littéralle (/motif/) soit utiliser le constructeur. Pour ce dernier le premier argument est une chaine de caractères qui correpond au motif à rechercher. Or ici la chaine à rechercher est \"/test/\", c'est à dire avec les /. or le texte ne possède aucun / donc il n'y a aucun motif trouvé par l'expression régulière."},
{"id":33,"theme":["incrément"],"niveau":1,"code":"var i = 0;\nvar tab =[];\ntab[i++] = i;\ntab[i++] = i;\ntab[i++] = i++;\nalert(tab);","reponses":["0,1,2","0,1,,2",",0,1,,3","1,2,3","1,2,,3",",1,2,3","0",",1"],"bonneReponse":"1,2,3","explication":""},
{"id":34,"theme":["opérateur"],"niveau":2,"code":"var val=0;\nfunction inc(){\n  return val++;\n}\n\nvar obj={};\nObject.defineProperty(obj,\"s\",{\n\t\tget : inc,\n\t\tset : inc,\n\t\tenumerable : true,\n\t\tconfigurable : true\n\t});\n\nobj.v = obj.s = obj.s = 100;\n\nalert(obj.v+obj.s);","reponses":["3","4","6","7","102","104","200","201","NaN","Une erreur apparait"],"bonneReponse":"102","explication":""},
{"id":35,"theme":["condition"],"niveau":1,"code":"var arr1=[];\nvar arr2=[];\n\nalert(arr1==arr2);\nalert(arr1===arr2);","reponses":["false puis false","false puis true","true puis false","true puis true","Une erreur apparait"],"bonneReponse":"false puis false","explication":"Les tableaux sont des objets. leur comparaison se fait donc par leur référence. Ils sont des instance différentes et ne sont donc jamais égals."},
{"id":36,"theme":["condition"],"niveau":1,"code":"function verif(nb){\n\tif( 5 < nb < 15){\n\t\talert(\"OK\");\n\t}\n}\n\nverif(10);\nverif(20);","reponses":["rien","OK apparait 1 fois","OK apparait 2 fois","Une erreur de syntaxe"],"bonneReponse":"OK apparait 2 fois","explication":""},
{"id":37,"theme":["condition"],"niveau":1,"code":"alert(\"abc\" < \"VWXYZ\");","reponses":["true","false","\"abcVWYZ\"","NaN","ERROR"],"bonneReponse":"false","explication":"Il s'agit en fait d'une question piège. L'opérateur <minicode type=\"javascript\"><</minicode> appliqué à des chaines de caractères ne les compare pas alphabétiquement et non pas selon leur longueur mais selon la valeur des caractères composant la chaine (le <minicode type=\"javascript\">charCode</minicode>).\n\tAinsi les premiers caractères de ces chaines (<minicode type=\"javascript\">'a'</minicode> et <minicode type=\"javascript\">'V'</minicode>) ont pour valeurs respectives <minicode type=\"javascript\">97</minicode> et <minicode type=\"javascript\">86</minicode>. En JavaScript la chaine \"VWXYZ\" se situe donc avant la chaine \"abc\".\n\n\tPour obtenir <minicode type=\"javascript\">true</minicode>, il aurait fallu comparer des chaines ayant la même casse (par exemple <minicode type=\"javascript\">alert(\"ABC\"<\"VWXYZ\")</minicode> ou <minicode type=\"javascript\">alert(\"abc\"<\"vwxyz\")</minicode>). C'est pourquoi quand on ordonne des chaines les méthodes <minicode type=\"javascript\">toUpperCase</minicode> ou <minicode type=\"javascript\">toLowerCase</minicode> peuvent être très utile.\n\n\tEn JavaScript, l'opérateur de concaténation est le <minicode type=\"javascript\">+</minicode> ainsi avec <minicode type=\"javascript\">alert(\"abc\" + \"VWXYZ\");</minicode> on obtient <minicode type=\"javascript\">\"abcVWXYZ\"</minicode>\n\n\tPour obtenir <minicode type=\"javascript\">NaN</minicode>, il aurait fallu utiliser un opérateur ne fonctionnant qu'avec des nombres."},
{"id":38,"theme":["condition"],"niveau":1,"code":"var i=\"1\";\nvar c=\"1\";\nswitch(i){\n\tcase c: alert(\"c\");break;\n\tcase 1: alert(\"nb\");break;\n\tcase \"1\": alert(\"str\");break;\n\tdefault: alert(\"other\");\n}","reponses":["\"c\"","\"nb\"","\"str\"","\"other\"","Plusieurs alert s'affichent","Une erreur se produit"],"bonneReponse":"\"c\"","explication":""},
{"id":39,"theme":["comparaison"],"niveau":1,"code":"\tvar s1 = new String(\"toto\");\n\tvar s2 = new String(\"toto\");\n\tvar r1 = /toto/g;\n\tvar r2 = /toto/g;\n\tvar compteur = 0;\n\n\tif(s1 == s2) compteur++;\n\tif(s1 === s2) compteur++;\n\n\tif(r1 == r2) compteur++;\n\tif(r1 === r2) compteur++;\n\n\tif(s1 == r1) compteur++;\n\tif(s1 === r1) compteur++;\n\n\talert(compteur);","reponses":["0","1","2","3","4","5","6","Il y a une erreur de syntaxe"],"bonneReponse":"0","explication":"Il faut bien comprendre les opérateurs de comparaison et ne pas oublier que <minicode type=\"javascript\">alert(typeof new String(\"toto\"))</minicode> vaut <minicode type=\"javascript\">\"object\"</minicode> et non pas <minicode type=\"javascript\">\"string\"</minicode>.\n\n\tAvec des objets, les opérateurs d'égalité (que ce soit <minicode type=\"javascript\">==</minicode> ou <minicode type=\"javascript\">===</minicode>) ne retournent <minicode type=\"javascript\">true</minicode> que si les deux opérandes font référence au même objet.\n\n\tOr <minicode type=\"javascript\">new String</minicode> crée une nouvelle instance. Ces variables ne sont donc pas égales.\n\tC'est la même chose avec les RegExp (même écrit en littéral) car chaque objet possède son propre statut (positionnement du curseur, etc...). Ainsi les variables ne font pas référence au même objet bien que ceux-ci ont été écrit de la même manière.\n\n\n\t<information>L'opérateur <minicode type=\"javascript\">==</minicode> n'est pas transitif. On peut remarquer que <minicode type=\"javascript\">\"a\" == \"a\"</minicode> et <minicode type=\"javascript\">\"a\" == new String(\"a\")</minicode> valent <minicode type=\"javascript\">true</minicode>. Mais <minicode type=\"javascript\">new String(\"a\") == new String(\"a\")</minicode> vaut <minicode type=\"javascript\">false</minicode>.</information>\n\n\n\tPour plus d'information vous pouvez consulter les algorithmes définis par la spécification ECMAScript 5 aux sections 11.9.3 (pour l'égalité abstraite) et 11.9.6 (pour l'égalité stricte)."},
{"id":40,"theme":["portée"],"niveau":5,"code":"\nvar toto = \"abc\";\n\nvar f = function(){\n\n\talert(\"def\");\n\n}\n\nwith({ toto:\"ghi\" }) {\n\n\tvar f = function () {\n\n\t   alert(toto);\n\n\t}\n\n}\n\nf();","reponses":["\"abc\"","\"def\"","\"ghi\"","undefined","une erreur apparait"],"bonneReponse":"\"ghi\"","explication":""},
{"id":41,"theme":["portée"],"niveau":5,"code":"var toto = \"abc\";\nfunction f(){\n\talert(\"def\");\n}\nwith({ toto:\"ghi\" }) {\n\tfunction f() {\n\t   alert(toto);\n\t}\n\tf();\n}","reponses":["\"abc\"","\"def\"","\"ghi\"","undefined","Une erreur apparait"],"bonneReponse":"\"abc\"","explication":""},
{"id":42,"theme":["portée"],"niveau":3,"code":"var test=5;\nfunction essais(condition){\n\tif(condition){\n\t\tvar test=10\n\t}\n\talert(test);\n}\n\nessais(false);","reponses":["rien","5","10","undefined","Une erreur se produit"],"bonneReponse":"undefined","explication":""},
{"id":43,"theme":["portée"],"niveau":4,"code":"var toto = \"abc\";\nfunction f(){\n\talert(\"def\");\n}\nwith({ toto:\"ghi\" }) {\n\tvar f = function() {\n\t   alert(toto);\n\t};\n\tf();\n}","reponses":["\"abc\"","\"def\"","\"ghi\"","undefined","Une erreur se produit"],"bonneReponse":"\"ghi\"","explication":""},
{}]}
